(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{627:function(n,a,s){"use strict";a.__esModule=!0,a.default={api:[s(634),s(635),s(636),s(637),s(638),s(639),s(640),s(641),s(642),s(643),s(644),s(645),s(646),s(647),s(648),s(649)],guides:[s(650),s(651),s(652),s(653),s(654),s(630),s(655),s(631),s(633),s(632)],examples:[{label:"Basic",slug:"basic",path:"website/modules/examples/Basic",code:s(656)},{label:"URL Parameters",slug:"url-params",path:"website/modules/examples/Params",code:s(657)},{label:"Redirects (Auth)",slug:"auth-workflow",path:"website/modules/examples/Auth",code:s(658)},{label:"Custom Link",slug:"custom-link",path:"website/modules/examples/CustomLink",code:s(659)},{label:"Preventing Transitions",slug:"preventing-transitions",path:"website/modules/examples/PreventingTransitions",code:s(660)},{label:"No Match (404)",slug:"no-match",path:"website/modules/examples/NoMatch",code:s(661)},{label:"Recursive Paths",slug:"recursive-paths",path:"website/modules/examples/Recursive",code:s(662)},{label:"Sidebar",slug:"sidebar",path:"website/modules/examples/Sidebar",code:s(663)},{label:"Animated Transitions",slug:"animated-transitions",path:"website/modules/examples/Animation/index",code:s(664),extraDependencies:{"react-transition-group":"^2.2.1"}},{label:"Ambiguous Matches",slug:"ambiguous-matches",path:"website/modules/examples/Ambiguous",code:s(665)},{label:"Route Config",slug:"route-config",path:"website/modules/examples/RouteConfig",code:s(666)},{label:"Modal Gallery",slug:"modal-gallery",path:"website/modules/examples/ModalGallery",code:s(667)},{label:"StaticRouter Context",slug:"static-router",path:"website/modules/examples/StaticRouter",code:s(668)},{label:"Query Parameters",slug:"query-parameters",path:"website/modules/examples/QueryParams",code:s(669)}]}},634:function(n,a){n.exports={markup:'<h1 id="BrowserRouter"><a href="/web/api/BrowserRouter" class="internal-link">&lt;BrowserRouter&gt;</a></h1>\n<p>A <a href="/core/api/Router" class="internal-link"><code>&lt;Router&gt;</code></a> that uses the HTML5 history API (<code>pushState</code>, <code>replaceState</code> and the <code>popstate</code> event) to keep your UI in sync with the URL.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router-dom&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span>\n  <span class="token attr-name">basename</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>optionalString<span class="token punctuation">}</span></span>\n  <span class="token attr-name">forceRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>optionalBool<span class="token punctuation">}</span></span>\n  <span class="token attr-name">getUserConfirmation</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>optionalFunc<span class="token punctuation">}</span></span>\n  <span class="token attr-name">keyLength</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>optionalNumber<span class="token punctuation">}</span></span>\n<span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="BrowserRouter-basename-string"><a href="/web/api/BrowserRouter/basename-string" class="internal-link">basename: string</a></h2>\n<p>The base URL for all locations. If your app is served from a sub-directory on your server, you&#x2019;ll want to set this to the sub-directory. A properly formatted basename should have a leading slash, but no trailing slash.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span> <span class="token attr-name">basename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/calendar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/today<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// renders &lt;a href=&quot;/calendar/today&quot;&gt;</span>\n</code></pre>\n<h2 id="BrowserRouter-getuserconfirmation-func"><a href="/web/api/BrowserRouter/getuserconfirmation-func" class="internal-link">getUserConfirmation: func</a></h2>\n<p>A function to use to confirm navigation. Defaults to using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm"><code>window.confirm</code></a>.</p>\n<pre><code class="language-jsx"><span class="token comment">// this is the default behavior</span>\n<span class="token keyword">function</span> <span class="token function">getConfirmation</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> allowTransition <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span>allowTransition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span> <span class="token attr-name">getUserConfirmation</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getConfirmation<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="BrowserRouter-forcerefresh-bool"><a href="/web/api/BrowserRouter/forcerefresh-bool" class="internal-link">forceRefresh: bool</a></h2>\n<p>If <code>true</code> the router will use full page refreshes on page navigation. You probably only want this in <a href="http://caniuse.com/#feat=history">browsers that don&#x2019;t support the HTML5 history API</a>.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> supportsHistory <span class="token operator">=</span> <span class="token string">&apos;pushState&apos;</span> <span class="token keyword">in</span> window<span class="token punctuation">.</span>history\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span> <span class="token attr-name">forceRefresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span>supportsHistory<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="BrowserRouter-keylength-number"><a href="/web/api/BrowserRouter/keylength-number" class="internal-link">keyLength: number</a></h2>\n<p>The length of <code>location.key</code>. Defaults to 6.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span> <span class="token attr-name">keyLength</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="BrowserRouter-children-node"><a href="/web/api/BrowserRouter/children-node" class="internal-link">children: node</a></h2>\n<p>A <a href="https://facebook.github.io/react/docs/react-api.html#react.children.only">single child element</a> to render.</p>\n',headers:[{text:"basename: string",slug:"basename-string"},{text:"getUserConfirmation: func",slug:"getuserconfirmation-func"},{text:"forceRefresh: bool",slug:"forcerefresh-bool"},{text:"keyLength: number",slug:"keylength-number"},{text:"children: node",slug:"children-node"}],title:{text:"<BrowserRouter>",slug:"BrowserRouter"}}},635:function(n,a){n.exports={markup:'<h1 id="HashRouter"><a href="/web/api/HashRouter" class="internal-link">&lt;HashRouter&gt;</a></h1>\n<p>A <a href="/core/api/Router" class="internal-link"><code>&lt;Router&gt;</code></a> that uses the hash portion of the URL (i.e. <code>window.location.hash</code>) to keep your UI in sync with the URL.</p>\n<p><strong>IMPORTANT NOTE:</strong> Hash history does not support <code>location.key</code> or <code>location.state</code>. In previous versions we attempted to shim the behavior but there were edge-cases we couldn&#x2019;t solve. Any code or plugin that needs this behavior won&#x2019;t work. As this technique is only intended to support legacy browsers, we encourage you to configure your server to work with <code>&lt;BrowserHistory&gt;</code> instead.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router-dom&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HashRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HashRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="HashRouter-basename-string"><a href="/web/api/HashRouter/basename-string" class="internal-link">basename: string</a></h2>\n<p>The base URL for all locations. A properly formatted basename should have a leading slash, but no trailing slash.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HashRouter</span> <span class="token attr-name">basename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/calendar<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/today<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// renders &lt;a href=&quot;#/calendar/today&quot;&gt;</span>\n</code></pre>\n<h2 id="HashRouter-getuserconfirmation-func"><a href="/web/api/HashRouter/getuserconfirmation-func" class="internal-link">getUserConfirmation: func</a></h2>\n<p>A function to use to confirm navigation. Defaults to using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm"><code>window.confirm</code></a>.</p>\n<pre><code class="language-jsx"><span class="token comment">// this is the default behavior</span>\n<span class="token keyword">function</span> <span class="token function">getConfirmation</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> allowTransition <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span>allowTransition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HashRouter</span> <span class="token attr-name">getUserConfirmation</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getConfirmation<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="HashRouter-hashtype-string"><a href="/web/api/HashRouter/hashtype-string" class="internal-link">hashType: string</a></h2>\n<p>The type of encoding to use for <code>window.location.hash</code>. Available values are:</p>\n<ul>\n<li><code>&quot;slash&quot;</code> - Creates hashes like <code>#/</code> and <code>#/sunshine/lollipops</code></li>\n<li><code>&quot;noslash&quot;</code> - Creates hashes like <code>#</code> and <code>#sunshine/lollipops</code></li>\n<li><code>&quot;hashbang&quot;</code> - Creates <a href="https://developers.google.com/webmasters/ajax-crawling/docs/learn-more">&#x201C;ajax crawlable&#x201D;</a> (deprecated by Google) hashes like <code>#!/</code> and <code>#!/sunshine/lollipops</code></li>\n</ul>\n<p>Defaults to <code>&quot;slash&quot;</code>.</p>\n<h2 id="HashRouter-children-node"><a href="/web/api/HashRouter/children-node" class="internal-link">children: node</a></h2>\n<p>A <a href="https://facebook.github.io/react/docs/react-api.html#react.children.only">single child element</a> to render.</p>\n',headers:[{text:"basename: string",slug:"basename-string"},{text:"getUserConfirmation: func",slug:"getuserconfirmation-func"},{text:"hashType: string",slug:"hashtype-string"},{text:"children: node",slug:"children-node"}],title:{text:"<HashRouter>",slug:"HashRouter"}}},636:function(n,a){n.exports={markup:'<h1 id="Link"><a href="/web/api/Link" class="internal-link">&lt;Link&gt;</a></h1>\n<p>Provides declarative, accessible navigation around your application.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router-dom&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="Link-to-string"><a href="/web/api/Link/to-string" class="internal-link">to: string</a></h2>\n<p>A string representation of the location to link to, created by concatenating the location&#x2019;s pathname, search, and hash properties.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/courses?sort=name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Link-to-object"><a href="/web/api/Link/to-object" class="internal-link">to: object</a></h2>\n<p>An object that can have any of the following properties:</p>\n<ul>\n<li><code>pathname</code>: A string representing the path to link to.</li>\n<li><code>search</code>: A string representation of query parameters.</li>\n<li><code>hash</code>: A hash to put in the URL, e.g. <code>#a-hash</code>.</li>\n<li><code>state</code>: State to persist to the <code>location</code>.</li>\n</ul>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span>\n  <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    pathname<span class="token punctuation">:</span> <span class="token string">&quot;/courses&quot;</span><span class="token punctuation">,</span>\n    search<span class="token punctuation">:</span> <span class="token string">&quot;?sort=name&quot;</span><span class="token punctuation">,</span>\n    hash<span class="token punctuation">:</span> <span class="token string">&quot;#the-hash&quot;</span><span class="token punctuation">,</span>\n    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> fromDashboard<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Link-replace-bool"><a href="/web/api/Link/replace-bool" class="internal-link">replace: bool</a></h2>\n<p>When <code>true</code>, clicking the link will replace the current entry in the history stack instead of adding a new one.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/courses<span class="token punctuation">&quot;</span></span> <span class="token attr-name">replace</span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Link-innerref-function"><a href="/web/api/Link/innerref-function" class="internal-link">innerRef: function</a></h2>\n<p>Allows access to the underlying <code>ref</code> of the component</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">refCallback</span> <span class="token operator">=</span> node <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// `node` refers to the mounted DOM element or null when unmounted</span>\n<span class="token punctuation">}</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">innerRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>refCallback<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Link-innerref-refobject"><a href="/web/api/Link/innerref-refobject" class="internal-link">innerRef: RefObject</a></h2>\n<p>Get the underlying <code>ref</code> of the component with <code>React.createRef()</code></p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> anchorRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">innerRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>anchorRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Link-others"><a href="/web/api/Link/others" class="internal-link">others</a></h2>\n<p>You can also pass props you&#x2019;d like to be on the <code>&lt;a&gt;</code> such as a <code>title</code>, <code>id</code>, <code>className</code>, etc.</p>\n',headers:[{text:"to: string",slug:"to-string"},{text:"to: object",slug:"to-object"},{text:"replace: bool",slug:"replace-bool"},{text:"innerRef: function",slug:"innerref-function"},{text:"innerRef: RefObject",slug:"innerref-refobject"},{text:"others",slug:"others"}],title:{text:"<Link>",slug:"Link"}}},637:function(n,a){n.exports={markup:'<h1 id="NavLink"><a href="/web/api/NavLink" class="internal-link">&lt;NavLink&gt;</a></h1>\n<p>A special version of the <a href="Link.md"><code>&lt;Link&gt;</code></a> that will add styling attributes to the rendered element when it matches the current URL.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> NavLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router-dom&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="NavLink-activeclassname-string"><a href="/web/api/NavLink/activeclassname-string" class="internal-link">activeClassName: string</a></h2>\n<p>The class to give the element when it is active. The default given class is <code>active</code>. This will be joined with the <code>className</code> prop.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/faq<span class="token punctuation">&quot;</span></span> <span class="token attr-name">activeClassName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>selected<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  FAQs\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="NavLink-activestyle-object"><a href="/web/api/NavLink/activestyle-object" class="internal-link">activeStyle: object</a></h2>\n<p>The styles to apply to the element when it is active.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span>\n  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/faq<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">activeStyle</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    fontWeight<span class="token punctuation">:</span> <span class="token string">&quot;bold&quot;</span><span class="token punctuation">,</span>\n    color<span class="token punctuation">:</span> <span class="token string">&quot;red&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">&gt;</span></span>\n  FAQs\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="NavLink-exact-bool"><a href="/web/api/NavLink/exact-bool" class="internal-link">exact: bool</a></h2>\n<p>When <code>true</code>, the active class/style will only be applied if the location is matched exactly.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">exact</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/profile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Profile\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="NavLink-strict-bool"><a href="/web/api/NavLink/strict-bool" class="internal-link">strict: bool</a></h2>\n<p>When <code>true</code>, the trailing slash on a location&#x2019;s <code>pathname</code> will be taken into consideration when determining if the location matches the current URL. See the <a href="/core/api/Route/strict-bool" class="internal-link"><code>&lt;Route strict&gt;</code></a> documentation for more information.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">strict</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/events/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Events\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="NavLink-isactive-func"><a href="/web/api/NavLink/isactive-func" class="internal-link">isActive: func</a></h2>\n<p>A function to add extra logic for determining whether the link is active. This should be used if you want to do more than verify that the link&#x2019;s pathname matches the current URL&#x2019;s <code>pathname</code>.</p>\n<pre><code class="language-jsx"><span class="token comment">// only consider an event active if its event id is an odd number</span>\n<span class="token keyword">const</span> <span class="token function-variable function">oddEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> location<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> eventID <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>eventID<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>eventID<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> eventID <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span>\n  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/events/123<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">isActive</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>oddEvent<span class="token punctuation">}</span></span>\n<span class="token punctuation">&gt;</span></span>Event <span class="token number">123</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="NavLink-location-object"><a href="/web/api/NavLink/location-object" class="internal-link">location: object</a></h2>\n<p>The <a href="/web/api/NavLink/isactive-func" class="internal-link"><code>isActive</code></a> compares the current history location (usually the current browser URL).\nTo compare to a different location, a <a href="/core/api/location" class="internal-link"><code>location</code></a> can be passed.</p>\n<h2 id="NavLink-aria-current-string"><a href="/web/api/NavLink/aria-current-string" class="internal-link">aria-current: string</a></h2>\n<p>The value of the <code>aria-current</code> attribute used on an active link. Available values are:</p>\n<ul>\n<li><code>&quot;page&quot;</code> - used to indicate a link within a set of pagination links</li>\n<li><code>&quot;step&quot;</code> - used to indicate a link within a step indicator for a step-based process</li>\n<li><code>&quot;location&quot;</code> - used to indicate the image that is visually highlighted as the current component of a flow chart</li>\n<li><code>&quot;date&quot;</code> - used to indicate the current date within a calendar</li>\n<li><code>&quot;time&quot;</code> - used to indicate the current time within a timetable</li>\n<li><code>&quot;true&quot;</code> - used to indicate if the NavLink is active</li>\n</ul>\n<p>Defaults to <code>&quot;page&quot;</code>.</p>\n<p>Based on <a href="https://www.w3.org/TR/wai-aria-1.1/#aria-current">WAI-ARIA 1.1 specifications</a></p>\n',headers:[{text:"activeClassName: string",slug:"activeclassname-string"},{text:"activeStyle: object",slug:"activestyle-object"},{text:"exact: bool",slug:"exact-bool"},{text:"strict: bool",slug:"strict-bool"},{text:"isActive: func",slug:"isactive-func"},{text:"location: object",slug:"location-object"},{text:"aria-current: string",slug:"aria-current-string"}],title:{text:"<NavLink>",slug:"NavLink"}}},638:function(n,a){n.exports={markup:'<h1 id="Prompt"><a href="/web/api/Prompt" class="internal-link">&lt;Prompt&gt;</a></h1>\n<p>Re-exported from core <a href="/core/api/Prompt" class="internal-link"><code>Prompt</code></a></p>\n',headers:[],title:{text:"<Prompt>",slug:"Prompt"}}},639:function(n,a){n.exports={markup:'<h1 id="MemoryRouter"><a href="/web/api/MemoryRouter" class="internal-link">&lt;MemoryRouter&gt;</a></h1>\n<p>A <a href="Router.md"><code>&lt;Router&gt;</code></a> that keeps the history of your &#x201C;URL&#x201D; in memory (does not read or write to the address bar). Useful in tests and non-browser environments like <a href="https://facebook.github.io/react-native/">React Native</a>.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> MemoryRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="MemoryRouter-initialentries-array"><a href="/web/api/MemoryRouter/initialentries-array" class="internal-link">initialEntries: array</a></h2>\n<p>An array of <code>location</code>s in the history stack. These may be full-blown location objects with <code>{ pathname, search, hash, state }</code> or simple string URLs.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MemoryRouter</span>\n  <span class="token attr-name">initialEntries</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;/one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/two&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">&quot;/three&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">initialIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="MemoryRouter-initialindex-number"><a href="/web/api/MemoryRouter/initialindex-number" class="internal-link">initialIndex: number</a></h2>\n<p>The initial location&#x2019;s index in the array of <code>initialEntries</code>.</p>\n<h2 id="MemoryRouter-getuserconfirmation-func"><a href="/web/api/MemoryRouter/getuserconfirmation-func" class="internal-link">getUserConfirmation: func</a></h2>\n<p>A function to use to confirm navigation. You must use this option when using <code>&lt;MemoryRouter&gt;</code> directly with a <code>&lt;Prompt&gt;</code>.</p>\n<h2 id="MemoryRouter-keylength-number"><a href="/web/api/MemoryRouter/keylength-number" class="internal-link">keyLength: number</a></h2>\n<p>The length of <code>location.key</code>. Defaults to 6.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MemoryRouter</span> <span class="token attr-name">keyLength</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="MemoryRouter-children-node"><a href="/web/api/MemoryRouter/children-node" class="internal-link">children: node</a></h2>\n<p>A <a href="https://facebook.github.io/react/docs/react-api.html#react.children.only">single child element</a> to render.</p>\n',headers:[{text:"initialEntries: array",slug:"initialentries-array"},{text:"initialIndex: number",slug:"initialindex-number"},{text:"getUserConfirmation: func",slug:"getuserconfirmation-func"},{text:"keyLength: number",slug:"keylength-number"},{text:"children: node",slug:"children-node"}],title:{text:"<MemoryRouter>",slug:"MemoryRouter"}}},640:function(n,a){n.exports={markup:'<h1 id="Redirect"><a href="/web/api/Redirect" class="internal-link">&lt;Redirect&gt;</a></h1>\n<p>Rendering a <code>&lt;Redirect&gt;</code> will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  loggedIn <span class="token operator">?</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/dashboard<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PublicHomePage</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Redirect-to-string"><a href="/web/api/Redirect/to-string" class="internal-link">to: string</a></h2>\n<p>The URL to redirect to. Any valid URL path that <a href="https://github.com/pillarjs/path-to-regexp/tree/v1.7.0"><code>path-to-regexp@^1.7.0</code></a> understands.\nAll URL parameters that are used in <code>to</code> must be covered by <code>from</code>.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/somewhere/else<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Redirect-to-object"><a href="/web/api/Redirect/to-object" class="internal-link">to: object</a></h2>\n<p>A location to redirect to. <code>pathname</code> can be any valid URL path that <a href="https://github.com/pillarjs/path-to-regexp/tree/v1.7.0"><code>path-to-regexp@^1.7.0</code></a> understands.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span>\n  <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    pathname<span class="token punctuation">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>\n    search<span class="token punctuation">:</span> <span class="token string">&quot;?utm=your+face&quot;</span><span class="token punctuation">,</span>\n    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> referrer<span class="token punctuation">:</span> currentLocation <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<p>The <code>state</code> object can be accessed via <code>this.props.location.state</code> in the redirected-to component. This new <code>referrer</code> key (which is not a special name) would then be accessed via <code>this.props.location.state.referrer</code> in the <code>Login</code> component pointed to by the pathname <code>&apos;/login&apos;</code></p>\n<h2 id="Redirect-push-bool"><a href="/web/api/Redirect/push-bool" class="internal-link">push: bool</a></h2>\n<p>When <code>true</code>, redirecting will push a new entry onto the history instead of replacing the current one.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">push</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/somewhere/else<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<h2 id="Redirect-from-string"><a href="/web/api/Redirect/from-string" class="internal-link">from: string</a></h2>\n<p>A pathname to redirect from. Any valid URL path that <a href="https://github.com/pillarjs/path-to-regexp/tree/v1.7.0"><code>path-to-regexp@^1.7.0</code></a> understands.\nAll matched URL parameters are provided to the pattern in <code>to</code>. Must contain all parameters that are used in <code>to</code>. Additional parameters not used by <code>to</code> are ignored.</p>\n<p>This can only be used to match a location when rendering a <code>&lt;Redirect&gt;</code> inside of a <code>&lt;Switch&gt;</code>. See <a href="/web/api/Switch/children-node" class="internal-link"><code>&lt;Switch children&gt;</code></a> for more details.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/old-path<span class="token punctuation">&apos;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/new-path<span class="token punctuation">&apos;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/new-path<span class="token punctuation">&apos;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Place<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">// Redirect with matched parameters</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/users/:id<span class="token punctuation">&apos;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/users/profile/:id<span class="token punctuation">&apos;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/users/profile/:id<span class="token punctuation">&apos;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Profile<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="Redirect-exact-bool"><a href="/web/api/Redirect/exact-bool" class="internal-link">exact: bool</a></h2>\n<p>Match <code>from</code> exactly; equivalent to <a href="/web/api/Route/exact-bool" class="internal-link">Route.exact</a>.</p>\n<h2 id="Redirect-strict-bool"><a href="/web/api/Redirect/strict-bool" class="internal-link">strict: bool</a></h2>\n<p>Match <code>from</code> strictly; equivalent to <a href="/web/api/Route/strict-bool" class="internal-link">Route.strict</a>.</p>\n',headers:[{text:"to: string",slug:"to-string"},{text:"to: object",slug:"to-object"},{text:"push: bool",slug:"push-bool"},{text:"from: string",slug:"from-string"},{text:"exact: bool",slug:"exact-bool"},{text:"strict: bool",slug:"strict-bool"}],title:{text:"<Redirect>",slug:"Redirect"}}},641:function(n,a){n.exports={markup:'<h1 id="Route"><a href="/web/api/Route" class="internal-link">&lt;Route&gt;</a></h1>\n<p>The Route component is perhaps the most important component in React\nRouter to understand and learn to use well. Its most basic\nresponsibility is to render some UI when a <a href="/web/api/location" class="internal-link">location</a>\nmatches the route&#x2019;s <code>path</code>.</p>\n<p>Consider the following code:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router-dom&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/news<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NewsFeed<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>If the location of the app is <code>/</code> then the UI hierarchy will be something like:</p>\n<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Home</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token comment">&lt;!-- react-empty: 2 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>And if the location of the app is <code>/news</code> then the UI hierarchy will be:</p>\n<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- react-empty: 1 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NewsFeed</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>The &#x201C;react-empty&#x201D; comments are just implementation details of React&#x2019;s <code>null</code> rendering. But for our purposes, it is instructive. A Route is always technically &#x201C;rendered&#x201D; even though its rendering <code>null</code>. As soon as the app location matches the route&#x2019;s path, your component will be rendered.</p>\n<h2 id="Route-route-render-methods"><a href="/web/api/Route/route-render-methods" class="internal-link">Route render methods</a></h2>\n<p>There are 3 ways to render something with a <code>&lt;Route&gt;</code>:</p>\n<ul>\n<li><a href="/web/api/Route/component" class="internal-link"><code>&lt;Route component&gt;</code></a></li>\n<li><a href="/web/api/Route/render-func" class="internal-link"><code>&lt;Route render&gt;</code></a></li>\n<li><a href="/web/api/Route/children-func" class="internal-link"><code>&lt;Route children&gt;</code></a></li>\n</ul>\n<p>Each is useful in different circumstances. You should use only one of these props on a given <code>&lt;Route&gt;</code>. See their explanations below to understand why you have 3 options. Most of the time you&#x2019;ll use <code>component</code>.</p>\n<h2 id="Route-route-props"><a href="/web/api/Route/route-props" class="internal-link">Route props</a></h2>\n<p>All three <a href="/web/api/Route/route-render-methods" class="internal-link">render methods</a> will be passed the same three route props</p>\n<ul>\n<li><a href="/web/api/match" class="internal-link">match</a></li>\n<li><a href="/web/api/location" class="internal-link">location</a></li>\n<li><a href="/web/api/history" class="internal-link">history</a></li>\n</ul>\n<h2 id="Route-component"><a href="/web/api/Route/component" class="internal-link">component</a></h2>\n<p>A React component to render only when the location matches. It will be\nrendered with <a href="/web/api/Route/route-props" class="internal-link">route props</a>.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/user/:username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello <span class="token punctuation">{</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>When you use <code>component</code> (instead of <code>render</code> or <code>children</code>, below) the router uses <a href="https://facebook.github.io/react/docs/react-api.html#createelement"><code>React.createElement</code></a> to create a new <a href="https://facebook.github.io/react/docs/rendering-elements.html">React element</a> from the given component. That means if you provide an inline function to the <code>component</code> prop, you would create a new component every render. This results in the existing component unmounting and the new component mounting instead of just updating the existing component. When using an inline function for inline rendering, use the <code>render</code> or the <code>children</code> prop (below).</p>\n<h2 id="Route-render-func"><a href="/web/api/Route/render-func" class="internal-link">render: func</a></h2>\n<p>This allows for convenient inline rendering and wrapping without the undesired remounting explained above.</p>\n<p>Instead of having a new <a href="https://facebook.github.io/react/docs/rendering-elements.html">React element</a> created for you using the <a href="/web/api/Route/component" class="internal-link"><code>component</code></a> prop, you can pass in a function to be called when the location matches. The <code>render</code> prop receives all the same <a href="/web/api/Route/route-props" class="internal-link">route props</a> as the <code>component</code> render prop.</p>\n<pre><code class="language-jsx"><span class="token comment">// convenient inline rendering</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/home<span class="token punctuation">&quot;</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// wrapping/composing</span>\n<span class="token keyword">const</span> <span class="token function-variable function">FadingRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">rest</span><span class="token punctuation">}</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FadeIn</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FadeIn</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FadingRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/cool<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Something<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<p><strong>Warning:</strong> <code>&lt;Route component&gt;</code> takes precedence over <code>&lt;Route render&gt;</code> so don&#x2019;t use both in the same <code>&lt;Route&gt;</code>.</p>\n<h2 id="Route-children-func"><a href="/web/api/Route/children-func" class="internal-link">children: func</a></h2>\n<p>Sometimes you need to render whether the path matches the location or not. In these cases, you can use the function <code>children</code> prop. It works exactly like <code>render</code> except that it gets called whether there is a match or not.</p>\n<p>The <code>children</code> render prop receives all the same <a href="/web/api/Route/route-props" class="internal-link">route props</a> as the <code>component</code> and <code>render</code> methods, except when a route fails to match the URL, then <code>match</code> is <code>null</code>. This allows you to dynamically adjust your UI based on whether or not the route matches. Here we&#x2019;re adding an <code>active</code> class if the route matches</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItemLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/somewhere<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItemLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/somewhere-else<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">ListItemLink</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> to<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n    <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>to<span class="token punctuation">}</span></span>\n    <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>match <span class="token operator">?</span> <span class="token string">&quot;active&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>to<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">rest</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This could also be useful for animations:</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">{</span><span class="token comment">/* Animate will always render, so you can use lifecycles\n      to animate its child in and out */</span><span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Animate</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">{</span>match <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Something</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">rest</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Animate</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<p><strong>Warning:</strong> Both <code>&lt;Route component&gt;</code> and <code>&lt;Route render&gt;</code> take precedence over <code>&lt;Route children&gt;</code> so don&#x2019;t use more than one in the same <code>&lt;Route&gt;</code>.</p>\n<h2 id="Route-path-string-string"><a href="/web/api/Route/path-string-string" class="internal-link">path: string | string[]</a></h2>\n<p>Any valid URL path or array of paths that <a href="https://github.com/pillarjs/path-to-regexp/tree/v1.7.0"><code>path-to-regexp@^1.7.0</code></a> understands.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/users/:id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;/users/:id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/profile/:id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<p>Routes without a <code>path</code> <em>always</em> match.</p>\n<h2 id="Route-exact-bool"><a href="/web/api/Route/exact-bool" class="internal-link">exact: bool</a></h2>\n<p>When <code>true</code>, will only match if the path matches the <code>location.pathname</code> <em>exactly</em>.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/one<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>location.pathname</th>\n<th>exact</th>\n<th>matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/one</code></td>\n<td><code>/one/two</code></td>\n<td><code>true</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>/one</code></td>\n<td><code>/one/two</code></td>\n<td><code>false</code></td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<h2 id="Route-strict-bool"><a href="/web/api/Route/strict-bool" class="internal-link">strict: bool</a></h2>\n<p>When <code>true</code>, a <code>path</code> that has a trailing slash will only match a <code>location.pathname</code> with a trailing slash. This has no effect when there are additional URL segments in the <code>location.pathname</code>.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">strict</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/one/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>location.pathname</th>\n<th>matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/one/</code></td>\n<td><code>/one</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>/one/</code></td>\n<td><code>/one/</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>/one/</code></td>\n<td><code>/one/two</code></td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Warning:</strong> <code>strict</code> can be used to enforce that a <code>location.pathname</code> has no trailing slash, but in order to do this both <code>strict</code> and <code>exact</code> must be <code>true</code>.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">strict</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/one<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>location.pathname</th>\n<th>matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/one</code></td>\n<td><code>/one</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>/one</code></td>\n<td><code>/one/</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>/one</code></td>\n<td><code>/one/two</code></td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n<h2 id="Route-location-object"><a href="/web/api/Route/location-object" class="internal-link">location: object</a></h2>\n<p>A <code>&lt;Route&gt;</code> element tries to match its <code>path</code> to the current history location (usually the current browser URL).\nHowever, a <a href="location.md"><code>location</code></a> with a different <code>pathname</code> can also be passed for matching.</p>\n<p>This is useful in cases when you need to match a <code>&lt;Route&gt;</code> to a location other than the current history location, as shown in the <a href="https://reacttraining.com/react-router/web/example/animated-transitions">Animated Transitions</a> example.</p>\n<p>If a <code>&lt;Route&gt;</code> element is wrapped in a <code>&lt;Switch&gt;</code> and matches the location passed to the <code>&lt;Switch&gt;</code> (or the current history location), then the <code>location</code> prop passed to <code>&lt;Route&gt;</code> will be overridden by the one used by the <code>&lt;Switch&gt;</code> (given <a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router/modules/Switch.js#L51">here</a>).</p>\n<h2 id="Route-sensitive-bool"><a href="/web/api/Route/sensitive-bool" class="internal-link">sensitive: bool</a></h2>\n<p>When <code>true</code>, will match if the path is <strong>case sensitive</strong>.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">sensitive</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/one<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>location.pathname</th>\n<th>sensitive</th>\n<th>matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/one</code></td>\n<td><code>/one</code></td>\n<td><code>true</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><code>/One</code></td>\n<td><code>/one</code></td>\n<td><code>true</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><code>/One</code></td>\n<td><code>/one</code></td>\n<td><code>false</code></td>\n<td>yes</td>\n</tr>\n</tbody>\n</table>\n',headers:[{text:"Route render methods",slug:"route-render-methods"},{text:"Route props",slug:"route-props"},{text:"component",slug:"component"},{text:"render: func",slug:"render-func"},{text:"children: func",slug:"children-func"},{text:"path: string | string[]",slug:"path-string-string"},{text:"exact: bool",slug:"exact-bool"},{text:"strict: bool",slug:"strict-bool"},{text:"location: object",slug:"location-object"},{text:"sensitive: bool",slug:"sensitive-bool"}],title:{text:"<Route>",slug:"Route"}}},642:function(n,a){n.exports={markup:'<h1 id="Router"><a href="/web/api/Router" class="internal-link">&lt;Router&gt;</a></h1>\n<p>The common low-level interface for all router components. Typically apps will use one of the high-level routers instead:</p>\n<ul>\n<li><a href="/web/api/BrowserRouter" class="internal-link"><code>&lt;BrowserRouter&gt;</code></a></li>\n<li><a href="/web/api/HashRouter" class="internal-link"><code>&lt;HashRouter&gt;</code></a></li>\n<li><a href="/web/api/MemoryRouter" class="internal-link"><code>&lt;MemoryRouter&gt;</code></a></li>\n<li><a href="/native/api/NativeRouter" class="internal-link"><code>&lt;NativeRouter&gt;</code></a></li>\n<li><a href="/web/api/StaticRouter" class="internal-link"><code>&lt;StaticRouter&gt;</code></a></li>\n</ul>\n<p>The most common use-case for using the low-level <code>&lt;Router&gt;</code> is to\nsynchronize a custom history with a state management lib like Redux or Mobx. Note that this is not required to use state management libs alongside React Router, it&#x2019;s only for deep integration.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createBrowserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;history&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">createBrowserHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span> <span class="token attr-name">history</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>history<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="Router-history-object"><a href="/web/api/Router/history-object" class="internal-link">history: object</a></h2>\n<p>A <a href="https://github.com/ReactTraining/history"><code>history</code></a> object to use for navigation.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createBrowserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;history&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> customHistory <span class="token operator">=</span> <span class="token function">createBrowserHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span> <span class="token attr-name">history</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>customHistory<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="Router-children-node"><a href="/web/api/Router/children-node" class="internal-link">children: node</a></h2>\n<p>A <a href="https://facebook.github.io/react/docs/react-api.html#react.children.only">single child element</a> to render.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n',headers:[{text:"history: object",slug:"history-object"},{text:"children: node",slug:"children-node"}],title:{text:"<Router>",slug:"Router"}}},643:function(n,a){n.exports={markup:'<h1 id="StaticRouter"><a href="/web/api/StaticRouter" class="internal-link">&lt;StaticRouter&gt;</a></h1>\n<p>A <a href="Router.md"><code>&lt;Router&gt;</code></a> that never changes location.</p>\n<p>This can be useful in server-side rendering scenarios when the user isn&#x2019;t actually clicking around, so the location never actually changes. Hence, the name: static. It&#x2019;s also useful in simple tests when you just need to plug in a location and make assertions on the render output.</p>\n<p>Here&#x2019;s an example node server that sends a 302 status code for <a href="Redirect.md"><code>&lt;Redirect&gt;</code></a>s and regular HTML for other requests:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">&quot;react-dom/server&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StaticRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// This context object contains the results of the render</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// context.url will contain the URL to redirect to if a &lt;Redirect&gt; was used</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      Location<span class="token punctuation">:</span> context<span class="token punctuation">.</span>url\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="StaticRouter-basename-string"><a href="/web/api/StaticRouter/basename-string" class="internal-link">basename: string</a></h2>\n<p>The base URL for all locations. A properly formatted basename should have a leading slash, but no trailing slash.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">basename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/calendar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/today<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// renders &lt;a href=&quot;/calendar/today&quot;&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="StaticRouter-location-string"><a href="/web/api/StaticRouter/location-string" class="internal-link">location: string</a></h2>\n<p>The URL the server received, probably <code>req.url</code> on a node server.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="StaticRouter-location-object"><a href="/web/api/StaticRouter/location-object" class="internal-link">location: object</a></h2>\n<p>A location object shaped like <code>{ pathname, search, hash, state }</code></p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">&quot;/bubblegum&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="StaticRouter-context-object"><a href="/web/api/StaticRouter/context-object" class="internal-link">context: object</a></h2>\n<p>A plain JavaScript object. During the render, components can add properties to the object to store information about the render.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>When a <code>&lt;Route&gt;</code> matches, it will pass the context object to the component it renders as the <code>staticContext</code> prop. Check out the <a href="/web/guides/server-rendering" class="internal-link">Server Rendering guide</a> for more information on how to do this yourself.</p>\n<p>After the render, these properties can be used to to configure the server&#x2019;s response.</p>\n<pre><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;404&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="StaticRouter-children-node"><a href="/web/api/StaticRouter/children-node" class="internal-link">children: node</a></h2>\n<p>A <a href="https://facebook.github.io/react/docs/react-api.html#react.children.only">single child element</a> to render.</p>\n',headers:[{text:"basename: string",slug:"basename-string"},{text:"location: string",slug:"location-string"},{text:"location: object",slug:"location-object"},{text:"context: object",slug:"context-object"},{text:"children: node",slug:"children-node"}],title:{text:"<StaticRouter>",slug:"StaticRouter"}}},644:function(n,a){n.exports={markup:'<h1 id="Switch"><a href="/web/api/Switch" class="internal-link">&lt;Switch&gt;</a></h1>\n<p>Renders the first child <a href="Route.md"><code>&lt;Route&gt;</code></a> or <a href="Redirect.md"><code>&lt;Redirect&gt;</code></a> that matches the location.</p>\n<p><strong>How is this different than just using a bunch of <code>&lt;Route&gt;</code>s?</strong></p>\n<p><code>&lt;Switch&gt;</code> is unique in that it renders a route <em>exclusively</em>. In contrast, every <code>&lt;Route&gt;</code> that matches the location renders <em>inclusively</em>. Consider this code:</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/:user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<p>If the URL is <code>/about</code>, then <code>&lt;About&gt;</code>, <code>&lt;User&gt;</code>, and <code>&lt;NoMatch&gt;</code> will all render because they all match the path. This is by design, allowing us to compose <code>&lt;Route&gt;</code>s into our apps in many ways, like sidebars and breadcrumbs, bootstrap tabs, etc.</p>\n<p>Occasionally, however, we want to pick only one <code>&lt;Route&gt;</code> to render. If we&#x2019;re at <code>/about</code> we don&#x2019;t want to also match <code>/:user</code> (or show our &#x201C;404&#x201D; page). Here&#x2019;s how to do it with <code>Switch</code>:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;react-router&apos;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/:user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>Now, if we&#x2019;re at <code>/about</code>, <code>&lt;Switch&gt;</code> will start looking for a matching <code>&lt;Route&gt;</code>. <code>&lt;Route path=&quot;/about&quot;/&gt;</code> will match and <code>&lt;Switch&gt;</code> will stop looking for matches and render <code>&lt;About&gt;</code>. Similarly, if we&#x2019;re at <code>/michael</code> then <code>&lt;User&gt;</code> will render.</p>\n<p>This is also useful for animated transitions since the matched <code>&lt;Route&gt;</code> is rendered in the same position as the previous one.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fade</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">{</span><span class="token comment">/* there will only ever be one child here */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fade</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fade</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span><span class="token punctuation">/&gt;</span></span>\n  <span class="token punctuation">{</span><span class="token comment">/* there will always be two children here,\n      one might render null though, making transitions\n      a bit more cumbersome to work out */</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fade</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="Switch-location-object"><a href="/web/api/Switch/location-object" class="internal-link">location: object</a></h2>\n<p>A <a href="/web/api/location" class="internal-link"><code>location</code></a> object to be used for matching children elements instead of the current history location (usually the current browser URL).</p>\n<h2 id="Switch-children-node"><a href="/web/api/Switch/children-node" class="internal-link">children: node</a></h2>\n<p>All children of a <code>&lt;Switch&gt;</code> should be <code>&lt;Route&gt;</code> or <code>&lt;Redirect&gt;</code> elements. Only the first child to match the current location will be rendered.</p>\n<p><code>&lt;Route&gt;</code> elements are matched using their <code>path</code> prop and <code>&lt;Redirect&gt;</code> elements are matched using their <code>from</code> prop. A <code>&lt;Route&gt;</code> with no <code>path</code> prop or a <code>&lt;Redirect&gt;</code> with no <code>from</code> prop will always match the current location.</p>\n<p>When you include a <code>&lt;Redirect&gt;</code> in a <code>&lt;Switch&gt;</code>, it can use any of the <code>&lt;Route&gt;</code>&apos;s location matching props: <code>path</code>, <code>exact</code>, and <code>strict</code>. <code>from</code> is just an alias for the <code>path</code> prop.</p>\n<p>If a <code>location</code> prop is given to the <code>&lt;Switch&gt;</code>, it will override the <code>location</code> prop on the matching child element.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/users<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Users<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/accounts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/users<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n',headers:[{text:"location: object",slug:"location-object"},{text:"children: node",slug:"children-node"}],title:{text:"<Switch>",slug:"Switch"}}},645:function(n,a){n.exports={markup:'<h1 id="history"><a href="/web/api/history" class="internal-link">history</a></h1>\n<p>The term &#x201C;history&#x201D; and &quot;<code>history</code> object&quot; in this documentation refers to <a href="https://github.com/ReactTraining/history">the <code>history</code> package</a>, which is one of only 2 major dependencies of React Router (besides React itself), and which provides several different implementations for managing session history in JavaScript in various environments.</p>\n<p>The following terms are also used:</p>\n<ul>\n<li>&#x201C;browser history&#x201D; - A DOM-specific implementation, useful in web browsers that support the HTML5 history API</li>\n<li>&#x201C;hash history&#x201D; - A DOM-specific implementation for legacy web browsers</li>\n<li>&#x201C;memory history&#x201D; - An in-memory history implementation, useful in testing and non-DOM environments like React Native</li>\n</ul>\n<p><code>history</code> objects typically have the following properties and methods:</p>\n<ul>\n<li><code>length</code> - (number) The number of entries in the history stack</li>\n<li><code>action</code> - (string) The current action (<code>PUSH</code>, <code>REPLACE</code>, or <code>POP</code>)</li>\n<li><code>location</code> - (object) The current location. May have the following properties:\n<ul>\n<li><code>pathname</code> - (string) The path of the URL</li>\n<li><code>search</code> - (string) The URL query string</li>\n<li><code>hash</code> - (string) The URL hash fragment</li>\n<li><code>state</code> - (object) location-specific state that was provided to e.g. <code>push(path, state)</code> when this location was pushed onto the stack. Only available in browser and memory history.</li>\n</ul>\n</li>\n<li><code>push(path, [state])</code> - (function) Pushes a new entry onto the history stack</li>\n<li><code>replace(path, [state])</code> - (function) Replaces the current entry on the history stack</li>\n<li><code>go(n)</code> - (function) Moves the pointer in the history stack by <code>n</code> entries</li>\n<li><code>goBack()</code> - (function) Equivalent to <code>go(-1)</code></li>\n<li><code>goForward()</code> - (function) Equivalent to <code>go(1)</code></li>\n<li><code>block(prompt)</code> - (function) Prevents navigation (see <a href="https://github.com/ReactTraining/history#blocking-transitions">the history docs</a>)</li>\n</ul>\n<h2 id="history-history-is-mutable"><a href="/web/api/history/history-is-mutable" class="internal-link">history is mutable</a></h2>\n<p>The history object is mutable. Therefore it is recommended to access the <a href="/web/api/location" class="internal-link"><code>location</code></a> from the render props of <a href="/web/api/Route" class="internal-link"><code>&lt;Route&gt;</code></a>, not from <code>history.location</code>. This ensures your assumptions about React are correct in lifecycle hooks. For example:</p>\n<pre><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Comp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// will be true</span>\n    <span class="token keyword">const</span> locationChanged <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span>location<span class="token punctuation">;</span>\n\n    <span class="token comment">// INCORRECT, will *always* be false because history is mutable.</span>\n    <span class="token keyword">const</span> locationChanged <span class="token operator">=</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span>location <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span>history<span class="token punctuation">.</span>location<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Comp<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<p>Additional properties may also be present depending on the implementation you&#x2019;re using. Please refer to <a href="https://github.com/ReactTraining/history#properties">the history documentation</a> for more details.</p>\n',headers:[{text:"history is mutable",slug:"history-is-mutable"}],title:{text:"history",slug:"history"}}},646:function(n,a){n.exports={markup:'<h1 id="location"><a href="/web/api/location" class="internal-link">location</a></h1>\n<p>Locations represent where the app is now, where you want it to go, or\neven where it was. It looks like this:</p>\n<pre><code class="language-js"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ac3df4&apos;</span><span class="token punctuation">,</span> <span class="token comment">// not with HashHistory!</span>\n  pathname<span class="token punctuation">:</span> <span class="token string">&apos;/somewhere&apos;</span>\n  search<span class="token punctuation">:</span> <span class="token string">&apos;?some=search-string&apos;</span><span class="token punctuation">,</span>\n  hash<span class="token punctuation">:</span> <span class="token string">&apos;#howdy&apos;</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>userDefined<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The router will provide you with a location object in a few places:</p>\n<ul>\n<li><a href="/web/api/Route/component" class="internal-link">Route component</a> as <code>this.props.location</code></li>\n<li><a href="/web/api/Route/render-func" class="internal-link">Route render</a> as <code>({ location }) =&gt; ()</code></li>\n<li><a href="/web/api/Route/children-func" class="internal-link">Route children</a> as <code>({ location }) =&gt; ()</code></li>\n<li><a href="/web/api/withRouter" class="internal-link">withRouter</a> as <code>this.props.location</code></li>\n</ul>\n<p>It is also found on <code>history.location</code> but you shouldn&#x2019;t use that because its mutable. You can read more about that in the <a href="/web/api/history" class="internal-link">history</a> doc.</p>\n<p>A location object is never mutated so you can use it in the lifecycle hooks to determine when navigation happens, this is really useful for data fetching and animation.</p>\n<pre><code class="language-js"><span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>location <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// navigated!</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>You can provide locations instead of strings to the various places that navigate:</p>\n<ul>\n<li>Web <a href="/web/api/Link/to" class="internal-link">Link to</a></li>\n<li>Native <a href="/native/api/Link/to" class="internal-link">Link to</a></li>\n<li><a href="/web/api/Redirect/to" class="internal-link">Redirect to</a></li>\n<li><a href="/web/api/history/push" class="internal-link">history.push</a></li>\n<li><a href="/web/api/history/push" class="internal-link">history.replace</a></li>\n</ul>\n<p>Normally you just use a string, but if you need to add some &#x201C;location state&#x201D; that will be available whenever the app returns to that specific location, you can use a location object instead. This is useful if you want to branch UI based on navigation history instead of just paths (like modals).</p>\n<pre><code class="language-jsx"><span class="token comment">// usually all you need</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/somewhere<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">// but you can use a location instead</span>\n<span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token punctuation">{</span>\n  pathname<span class="token punctuation">:</span> <span class="token string">&apos;/somewhere&apos;</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token punctuation">{</span> fromDashboard<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>location<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>location<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>\nhistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>\n</code></pre>\n<p>Finally, you can pass a location to the following components:</p>\n<ul>\n<li><a href="/web/api/Route/location" class="internal-link">Route</a></li>\n<li><a href="/web/api/Switch/location" class="internal-link">Switch</a></li>\n</ul>\n<p>This will prevent them from using the actual location in the router&#x2019;s state. This is useful for animation and pending navigation, or any time you want to trick a component into rendering at a different location than the real one.</p>\n',headers:[],title:{text:"location",slug:"location"}}},647:function(n,a){n.exports={markup:'<h1 id="match"><a href="/web/api/match" class="internal-link">match</a></h1>\n<p>A <code>match</code> object contains information about how a <code>&lt;Route path&gt;</code> matched the URL. <code>match</code> objects contain the following properties:</p>\n<ul>\n<li><code>params</code> - (object) Key/value pairs parsed from the URL corresponding to the dynamic segments of the path</li>\n<li><code>isExact</code> - (boolean) <code>true</code> if the entire URL was matched (no trailing characters)</li>\n<li><code>path</code> - (string) The path pattern used to match. Useful for building nested <code>&lt;Route&gt;</code>s</li>\n<li><code>url</code> - (string) The matched portion of the URL. Useful for building nested <code>&lt;Link&gt;</code>s</li>\n</ul>\n<p>You&#x2019;ll have access to <code>match</code> objects in various places:</p>\n<ul>\n<li><a href="/web/api/Route/component" class="internal-link">Route component</a> as <code>this.props.match</code></li>\n<li><a href="/web/api/Route/render-func" class="internal-link">Route render</a> as <code>({ match }) =&gt; ()</code></li>\n<li><a href="/web/api/Route/children-func" class="internal-link">Route children</a> as <code>({ match }) =&gt; ()</code></li>\n<li><a href="/web/api/withRouter" class="internal-link">withRouter</a> as <code>this.props.match</code></li>\n<li><a href="/web/api/matchPath" class="internal-link">matchPath</a> as the return value</li>\n</ul>\n<p>If a Route does not have a <code>path</code>, and therefore always matches, you&#x2019;ll get the closest parent match. Same goes for <code>withRouter</code>.</p>\n<h2 id="match-null-matches"><a href="/web/api/match/null-matches" class="internal-link">null matches</a></h2>\n<p>A <code>&lt;Route&gt;</code> that uses the <code>children</code> prop will call its <code>children</code> function even when the route&#x2019;s <code>path</code> does not match the current location. When this is the case, the <code>match</code> will be <code>null</code>. Being able to render a <code>&lt;Route&gt;</code>&apos;s contents when it does match can be useful, but certain challenges arise from this situation.</p>\n<p>The default way to &#x201C;resolve&#x201D; URLs is to join the <code>match.url</code> string to the &#x201C;relative&#x201D; path.</p>\n<pre><code class="language-js"><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/relative-path`</span></span><span class="token punctuation">;</span>\n</code></pre>\n<p>If you attempt to do this when the match is <code>null</code>, you will end up with a <code>TypeError</code>. This means that it is considered unsafe to attempt to join &#x201C;relative&#x201D; paths inside of a <code>&lt;Route&gt;</code> when using the <code>children</code> prop.</p>\n<p>A similar, but more subtle situation occurs when you use a pathless <code>&lt;Route&gt;</code> inside of a <code>&lt;Route&gt;</code> that generates a <code>null</code> match object.</p>\n<pre><code class="language-js"><span class="token comment">// location.pathname = &apos;/matches&apos;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/does-not-match<span class="token punctuation">&apos;</span></span> <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token comment">// match === null</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match<span class="token punctuation">:</span>pathlessMatch <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n    <span class="token comment">// pathlessMatch === ???</span>\n  <span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre>\n<p>Pathless <code>&lt;Route&gt;</code>s inherit their <code>match</code> object from their parent. If their parent <code>match</code> is <code>null</code>, then their match will also be <code>null</code>. This means that a) any child routes/links will have to be absolute because there is no parent to resolve with and b) a pathless route whose parent <code>match</code> can be <code>null</code> will need to use the <code>children</code> prop to render.</p>\n',headers:[{text:"null matches",slug:"null-matches"}],title:{text:"match",slug:"match"}}},648:function(n,a){n.exports={markup:'<h1 id="matchPath"><a href="/web/api/matchPath" class="internal-link">matchPath</a></h1>\n<p>This lets you use the same matching code that <code>&lt;Route&gt;</code> uses except outside of the normal render cycle, like gathering up data dependencies before rendering on the server.</p>\n<pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> matchPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span><span class="token string">&quot;/users/123&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  path<span class="token punctuation">:</span> <span class="token string">&quot;/users/:id&quot;</span><span class="token punctuation">,</span>\n  exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  strict<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="matchPath-pathname"><a href="/web/api/matchPath/pathname" class="internal-link">pathname</a></h2>\n<p>The first argument is the pathname you want to match. If you&#x2019;re using\nthis on the server with Node.js, it would be <code>req.path</code>.</p>\n<h2 id="matchPath-props"><a href="/web/api/matchPath/props" class="internal-link">props</a></h2>\n<p>The second argument are the props to match against, they are identical\nto the matching props <code>Route</code> accepts:</p>\n<pre><code class="language-js"><span class="token punctuation">{</span>\n  path<span class="token punctuation">,</span> <span class="token comment">// like /users/:id; either a single string or an array of strings</span>\n    strict<span class="token punctuation">,</span> <span class="token comment">// optional, defaults to false</span>\n    exact<span class="token punctuation">;</span> <span class="token comment">// optional, defaults to false</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',headers:[{text:"pathname",slug:"pathname"},{text:"props",slug:"props"}],title:{text:"matchPath",slug:"matchPath"}}},649:function(n,a){n.exports={markup:'<h1 id="withRouter"><a href="/web/api/withRouter" class="internal-link">withRouter</a></h1>\n<p>You can get access to the <a href="/web/api/history" class="internal-link"><code>history</code></a> object&#x2019;s properties and the closest <a href="/web/api/Route" class="internal-link"><code>&lt;Route&gt;</code></a>&apos;s <a href="/web/api/match" class="internal-link"><code>match</code></a> via the <code>withRouter</code> higher-order component. <code>withRouter</code> will pass updated <code>match</code>, <code>location</code>, and <code>history</code> props to the wrapped component whenever it renders.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&quot;prop-types&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// A simple component that shows the pathname of the current location</span>\n<span class="token keyword">class</span> <span class="token class-name">ShowTheLocation</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    match<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    location<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n    history<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">.</span>isRequired\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> match<span class="token punctuation">,</span> location<span class="token punctuation">,</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>You are now at <span class="token punctuation">{</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Create a new component that is &quot;connected&quot; (to borrow redux</span>\n<span class="token comment">// terminology) to the router.</span>\n<span class="token keyword">const</span> ShowTheLocationWithRouter <span class="token operator">=</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>ShowTheLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h4>Important Note</h4>\n<p><code>withRouter</code> does not subscribe to location changes like React Redux&#x2019;s <code>connect</code> does for state changes. Instead, re-renders after location changes propagate out from the <code>&lt;Router&gt;</code> component. This means that <code>withRouter</code> does <em>not</em> re-render on route transitions unless its parent component re-renders. If you are using <code>withRouter</code> to prevent updates from being blocked by <code>shouldComponentUpdate</code>, it is important that <code>withRouter</code> wraps the component that implements <code>shouldComponentUpdate</code>. For example, when using Redux:</p>\n<pre><code class="language-js"><span class="token comment">// This gets around shouldComponentUpdate</span>\n<span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// or</span>\n<span class="token function">compose</span><span class="token punctuation">(</span>\n  withRouter<span class="token punctuation">,</span>\n  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span>\n\n<span class="token comment">// This does not</span>\n<span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">withRouter</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// nor</span>\n<span class="token function">compose</span><span class="token punctuation">(</span>\n  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  withRouter\n<span class="token punctuation">)</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span>\n</code></pre>\n<p>See <a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/blocked-updates.md">this guide</a> for more information.</p>\n<h4>Static Methods and Properties</h4>\n<p>All non-react specific static methods and properties of the wrapped component are automatically copied to the\n&quot;connected&quot; component.</p>\n<h2 id="withRouter-componentwrappedcomponent"><a href="/web/api/withRouter/componentwrappedcomponent" class="internal-link">Component.WrappedComponent</a></h2>\n<p>The wrapped component is exposed as the static property <code>WrappedComponent</code> on the returned component, which can be used\nfor testing the component in isolation, among other things.</p>\n<pre><code class="language-jsx"><span class="token comment">// MyComponent.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span>\n\n<span class="token comment">// MyComponent.test.js</span>\n<span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&apos;./MyComponent&apos;</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent.WrappedComponent</span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">...</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="withRouter-wrappedcomponentref-func"><a href="/web/api/withRouter/wrappedcomponentref-func" class="internal-link">wrappedComponentRef: func</a></h2>\n<p>A function that will be passed as the <code>ref</code> prop to the wrapped component.</p>\n<pre><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">wrappedComponentRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>c <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',headers:[{text:"Component.WrappedComponent",slug:"componentwrappedcomponent"},{text:"wrappedComponentRef: func",slug:"wrappedcomponentref-func"}],title:{text:"withRouter",slug:"withRouter"}}},650:function(n,a){n.exports={markup:'<h1 id="quick-start"><a href="/web/guides/quick-start" class="internal-link">Quick Start</a></h1>\n<p>You&#x2019;ll need a React web app to add <code>react-router</code>.</p>\n<p>If you need to create one, the easiest way to get started is with a popular tool called <a href="https://github.com/facebook/create-react-app">Create React App</a>.</p>\n<p>First install <code>create-react-app</code>, if you don&#x2019;t already have it, and then make a new project with it.</p>\n<pre><code class="language-sh"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-app\ncreate-react-app demo-app\n<span class="token function">cd</span> demo-app\n</code></pre>\n<h2 id="quick-start-installation"><a href="/web/guides/quick-start/installation" class="internal-link">Installation</a></h2>\n<p>React Router DOM is <a href="https://npm.im/react-router-dom">published to npm</a> so you can install it with either <code>npm</code> or <a href="https://yarnpkg.com"><code>yarn</code></a>.</p>\n<pre><code class="language-sh"><span class="token function">npm</span> <span class="token function">install</span> react-router-dom\n</code></pre>\n<p>Copy/paste either of the examples (below) into your <code>src/App.js</code>.</p>\n<h2 id="quick-start-example-basic-routing"><a href="/web/guides/quick-start/example-basic-routing" class="internal-link">Example: Basic Routing</a></h2>\n<p>In this example we have 3 &#x2018;Page&#x2019; Components handled by the <code>&lt;Router&gt;</code>.</p>\n<p>Note: Instead of <code>&lt;a href=&quot;/&quot;&gt;</code> we use <code>&lt;Link to=&quot;/&quot;&gt;</code>.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">AppRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/users/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exact</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Index<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/users/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Users<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> AppRouter<span class="token punctuation">;</span>\n</code></pre>\n<h2 id="quick-start-example-nested-routing"><a href="/web/guides/quick-start/example-nested-routing" class="internal-link">Example: Nested Routing</a></h2>\n<p>This example shows how nested routing works. The route <code>/topics</code> loads the <code>Topics</code> component, which renders any further <code>&lt;Route&gt;</code>&apos;s conditionally on the paths <code>:id</code> value.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/&gt;</span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/topics<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Topic</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Requested Param<span class="token punctuation">:</span> <span class="token punctuation">{</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Topics</span><span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/components`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>Components<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/props-v-state`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>Props v<span class="token punctuation">.</span> State<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/:id`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Topic<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n        <span class="token attr-name">exact</span>\n        <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>match<span class="token punctuation">.</span>path<span class="token punctuation">}</span></span>\n        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Please select a topic<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/topics<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre>\n<p>Now you&#x2019;re ready to tinker. Happy routing!</p>\n',headers:[{text:"Installation",slug:"installation"},{text:"Example: Basic Routing",slug:"example-basic-routing"},{text:"Example: Nested Routing",slug:"example-nested-routing"}],title:{text:"Quick Start",slug:"quick-start"}}},651:function(n,a){n.exports={markup:'<h1 id="basic-components"><a href="/web/guides/basic-components" class="internal-link">Basic Components</a></h1>\n<p>There are three types of components in React Router: router components, route matching components, and navigation components.</p>\n<p>All of the components that you use in a web application should be imported from <code>react-router-dom</code>.</p>\n<pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="basic-components-routers"><a href="/web/guides/basic-components/routers" class="internal-link">Routers</a></h2>\n<p>At the core of every React Router application should be a router component. For web projects, <code>react-router-dom</code> provides <code>&lt;BrowserRouter&gt;</code> and <code>&lt;HashRouter&gt;</code> routers. Both of these will create a specialized <code>history</code> object for you. Generally speaking, you should use a <code>&lt;BrowserRouter&gt;</code> if you have a server that responds to requests and a <code>&lt;HashRouter&gt;</code> if you are using a static file server.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n  holder\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="basic-components-route-matching"><a href="/web/guides/basic-components/route-matching" class="internal-link">Route Matching</a></h2>\n<p>There are two route matching components: <code>&lt;Route&gt;</code> and <code>&lt;Switch&gt;</code>.</p>\n<pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Route matching is done by comparing a <code>&lt;Route&gt;</code>&apos;s <code>path</code> prop to the current location&#x2019;s <code>pathname</code>. When a <code>&lt;Route&gt;</code> matches it will render its content and when it does not match, it will render <code>null</code>. A <code>&lt;Route&gt;</code> with no path will always match.</p>\n<pre><code class="language-jsx"><span class="token comment">// when location = { pathname: &apos;/about&apos; }</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/about<span class="token punctuation">&apos;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// renders &lt;About/&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&apos;</span>/contact<span class="token punctuation">&apos;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// renders null</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Always<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// renders &lt;Always/&gt;</span>\n</code></pre>\n<p>You can include a <code>&lt;Route&gt;</code> anywhere that you want to render content based on the location. It will often make sense to list a number of possible <code>&lt;Route&gt;</code>s next to each other. The <code>&lt;Switch&gt;</code> component is used to group <code>&lt;Route&gt;</code>s together.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/contact<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>The <code>&lt;Switch&gt;</code> is not required for grouping <code>&lt;Route&gt;</code>s, but it can be quite useful. A <code>&lt;Switch&gt;</code> will iterate over all of its children <code>&lt;Route&gt;</code> elements and only render the first one that matches the current location. This helps when multiple route&#x2019;s paths match the same pathname, when animating transitions between routes, and in identifying when no routes match the current location (so that you can render a &#x201C;404&#x201D; component).</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/contact<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token punctuation">{</span><span class="token comment">/* when none of the above match, &lt;NoMatch&gt; will be rendered */</span><span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h2 id="basic-components-route-rendering-props"><a href="/web/guides/basic-components/route-rendering-props" class="internal-link">Route Rendering Props</a></h2>\n<p>You have three prop choices for how you render a component for a given <code>&lt;Route&gt;</code>: <code>component</code>, <code>render</code>, and <code>children</code>. You can check out the <a href="/web/api/Route" class="internal-link"><code>&lt;Route&gt;</code> documentation</a> for more information on each one, but here we&#x2019;ll focus on <code>component</code> and <code>render</code> because those are the two you will almost always use.</p>\n<p><code>component</code> should be used when you have an existing component (either a <code>React.Component</code> or a stateless functional component) that you want to render. <code>render</code>, which takes an inline function, should only be used when you have to pass in-scope variables to the component you want to render. You should <strong>not</strong> use the <code>component</code> prop with an inline function to pass in-scope variables because you will get undesired component unmounts/remounts.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> someVariable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* these are good */</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n        <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>About</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">extra</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someVariable<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/&gt;</span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* do not do this */</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n        <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/contact<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Contact</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">extra</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someVariable<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="basic-components-navigation"><a href="/web/guides/basic-components/navigation" class="internal-link">Navigation</a></h2>\n<p>React Router provides a <code>&lt;Link&gt;</code> component to create links in your application. Wherever you render a <code>&lt;Link&gt;</code>, an anchor (<code>&lt;a&gt;</code>) will be rendered in your application&#x2019;s HTML.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">// &lt;a href=&apos;/&apos;&gt;Home&lt;/a&gt;</span>\n</code></pre>\n<p>The <code>&lt;NavLink&gt;</code> is a special type of <code>&lt;Link&gt;</code> that can style itself as &#x201C;active&#x201D; when its <code>to</code> prop matches the current location.</p>\n<pre><code class="language-jsx"><span class="token comment">// location = { pathname: &apos;/react&apos; }</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/react<span class="token punctuation">&quot;</span></span> <span class="token attr-name">activeClassName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>hurray<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  React\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavLink</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">// &lt;a href=&apos;/react&apos; className=&apos;hurray&apos;&gt;React&lt;/a&gt;</span>\n</code></pre>\n<p>Any time that you want to force navigation, you can render a <code>&lt;Redirect&gt;</code>. When a <code>&lt;Redirect&gt;</code> renders, it will navigate using its <code>to</code> prop.</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n',headers:[{text:"Routers",slug:"routers"},{text:"Route Matching",slug:"route-matching"},{text:"Route Rendering Props",slug:"route-rendering-props"},{text:"Navigation",slug:"navigation"}],title:{text:"Basic Components",slug:"basic-components"}}},652:function(n,a){n.exports={markup:'<h1 id="server-rendering"><a href="/web/guides/server-rendering" class="internal-link">Server Rendering</a></h1>\n<p>Rendering on the server is a bit different since it&#x2019;s all stateless. The basic idea is that we wrap the app in a stateless <a href="/web/api/StaticRouter" class="internal-link"><code>&lt;StaticRouter&gt;</code></a> instead of a <a href="/web/api/BrowserRouter" class="internal-link"><code>&lt;BrowserRouter&gt;</code></a>. We pass in the requested url from the server so the routes can match and a <code>context</code> prop we&#x2019;ll discuss next.</p>\n<pre><code class="language-jsx"><span class="token comment">// client</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">// server (not the complete story)</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span>\n  <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span>\n  <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span></span>\n<span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>When you render a <a href="/web/api/Redirect" class="internal-link"><code>&lt;Redirect&gt;</code></a> on the client, the browser history changes state and we get the new screen. In a static server environment we can&#x2019;t change the app state. Instead, we use the <code>context</code> prop to find out what the result of rendering was. If we find a <code>context.url</code>, then we know the app redirected. This allows us to send a proper redirect from the server.</p>\n<pre><code class="language-jsx"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> markup <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Somewhere a `&lt;Redirect&gt;` was rendered</span>\n  <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// we&apos;re good, send the response</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="server-rendering-adding-app-specific-context-information"><a href="/web/guides/server-rendering/adding-app-specific-context-information" class="internal-link">Adding app specific context information</a></h2>\n<p>The router only ever adds <code>context.url</code>. But you may want some redirects to be 301 and others 302. Or maybe you&#x2019;d like to send a 404 response if some specific branch of UI is rendered, or a 401 if they aren&#x2019;t authorized. The context prop is yours, so you can mutate it. Here&#x2019;s a way to distinguish between 301 and 302 redirects:</p>\n<pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">RedirectWithStatus</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> status <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n      <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> staticContext <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// there is no `staticContext` on the client, so</span>\n        <span class="token comment">// we need to guard against that here</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>staticContext<span class="token punctuation">)</span> staticContext<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">from</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>to<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// somewhere in your app</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* some other routes */</span><span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RedirectWithStatus</span> <span class="token attr-name">status</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">301</span><span class="token punctuation">}</span></span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/users<span class="token punctuation">&quot;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/profiles<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RedirectWithStatus</span> <span class="token attr-name">status</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">302</span><span class="token punctuation">}</span></span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/courses<span class="token punctuation">&quot;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/dashboard<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// on the server</span>\n<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> markup <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// can use the `context.status` that</span>\n  <span class="token comment">// we added in RedirectWithStatus</span>\n  <span class="token function">redirect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>status<span class="token punctuation">,</span> context<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="server-rendering-404-401-or-any-other-status"><a href="/web/guides/server-rendering/404-401-or-any-other-status" class="internal-link">404, 401, or any other status</a></h2>\n<p>We can do the same thing as above. Create a component that adds some context and render it anywhere in the app to get a different status code.</p>\n<pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n      <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> staticContext <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>staticContext<span class="token punctuation">)</span> staticContext<span class="token punctuation">.</span>status <span class="token operator">=</span> code<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> children<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Now you can render a <code>Status</code> anywhere in the app that you want to add the code to <code>staticContext</code>.</p>\n<pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Status</span> <span class="token attr-name">code</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">404</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Sorry<span class="token punctuation">,</span> can&#x2019;t find that<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Status</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// somewhere else</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/dashboard<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Dashboard<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NotFound<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="server-rendering-putting-it-all-together"><a href="/web/guides/server-rendering/putting-it-all-together" class="internal-link">Putting it all together</a></h2>\n<p>This isn&#x2019;t a real app, but it shows all of the general pieces you&#x2019;ll\nneed to put it all together.</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">&quot;react-dom/server&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StaticRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StaticRouter</span> <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>req<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>context<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StaticRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      Location<span class="token punctuation">:</span> context<span class="token punctuation">.</span>url\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`\n      &lt;!doctype html&gt;\n      &lt;div id=&quot;app&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;\n    `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>And then the client:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BrowserRouter</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="server-rendering-data-loading"><a href="/web/guides/server-rendering/data-loading" class="internal-link">Data Loading</a></h2>\n<p>There are so many different approaches to this, and there&#x2019;s no clear best practice yet, so we seek to be composable with any approach, and not prescribe or lean toward one or the other. We&#x2019;re confident the router can fit inside the constraints of your application.</p>\n<p>The primary constraint is that you want to load data before you render. React Router exports the <code>matchPath</code> static function that it uses internally to match locations to routes. You can use this function on the server to help determine what your data dependencies will be before rendering.</p>\n<p>The gist of this approach relies on a static route config used to both render your routes and match against before rendering to determine data dependencies.</p>\n<pre><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token punctuation">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>\n    component<span class="token punctuation">:</span> Root<span class="token punctuation">,</span>\n    loadData<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getSomeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// etc.</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Then use this config to render your routes in the app:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./routes&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">{</span>routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>route <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">route</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Then on the server you&#x2019;d have something like:</p>\n<pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> matchPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// inside a request</span>\n<span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// use `some` to imitate `&lt;Switch&gt;` behavior of selecting only</span>\n<span class="token comment">// the first to match</span>\nroutes<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// use `matchPath` here</span>\n  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> match<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something w/ the data so the client</span>\n  <span class="token comment">// can access it then render the app</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>And finally, the client will need to pick up the data. Again, we aren&#x2019;t in the business of prescribing a data loading pattern for your app, but these are the touch points you&#x2019;ll need to implement.</p>\n<p>You might be interested in our <a href="https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config">React Router Config</a> package to assist with data loading and server rendering with static route configs.</p>\n',headers:[{text:"Adding app specific context information",slug:"adding-app-specific-context-information"},{text:"404, 401, or any other status",slug:"404-401-or-any-other-status"},{text:"Putting it all together",slug:"putting-it-all-together"},{text:"Data Loading",slug:"data-loading"}],title:{text:"Server Rendering",slug:"server-rendering"}}},653:function(n,a){n.exports={markup:'<h1 id="code-splitting"><a href="/web/guides/code-splitting" class="internal-link">Code Splitting</a></h1>\n<p>One great feature of the web is that we don&#x2019;t have to make our visitors download the entire app before they can use it. You can think of code splitting as incrementally downloading the app. To accomplish this we&#x2019;ll use <a href="https://webpack.js.org/">webpack</a>, <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/"><code>@babel/plugin-syntax-dynamic-import</code></a>, and <a href="https://github.com/smooth-code/loadable-components"><code>loadable-components</code></a>.</p>\n<p><a href="https://webpack.js.org/">webpack</a> has built-in support for <a href="https://github.com/tc39/proposal-dynamic-import">dynamic imports</a>; however, if you are using <a href="https://babeljs.io/">Babel</a> (e.g., to compile JSX to JavaScript) then you will need to use the <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/"><code>@babel/plugin-syntax-dynamic-import</code></a> plugin. This is a syntax-only plugin, meaning Babel won&#x2019;t do any additional transformations. The plugin simply allows Babel to parse dynamic imports so webpack can bundle them as a code split. Your <code>.babelrc</code> should look something like this:</p>\n<pre><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-react&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><a href="https://github.com/smooth-code/loadable-components"><code>loadable-components</code></a> is a library for loading components with dynamic imports. It handles all sorts of edge cases automatically and makes code splitting simple! Here&#x2019;s an example of how to use <a href="https://github.com/smooth-code/loadable-components"><code>loadable-components</code></a>:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> loadable <span class="token keyword">from</span> <span class="token string">&apos;@loadable/component&apos;</span>\n<span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">&quot;./Loading&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> LoadableComponent <span class="token operator">=</span> <span class="token function">loadable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&apos;./Dashboard&apos;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  fallback<span class="token punctuation">:</span> Loading<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">LoadableDashboard</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoadableComponent</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>That&#x2019;s all there is to it! Simply use <code>LoadableDashboard</code> (or whatever you named your component) and it will automatically be loaded and rendered when you use it in your application. The <code>fallback</code> is a placeholder component to show while the real component is loading.</p>\n<p>Full documentation is available <a href="https://www.smooth-code.com/open-source/loadable-components/docs/getting-started/">here</a></p>\n<h2 id="code-splitting-code-splitting-and-server-side-rendering"><a href="/web/guides/code-splitting/code-splitting-and-server-side-rendering" class="internal-link">Code Splitting and Server-Side Rendering</a></h2>\n<p><a href="https://github.com/smooth-code/loadable-components"><code>loadable-components</code></a> includes <a href="https://www.smooth-code.com/open-source/loadable-components/docs/server-side-rendering/">a guide for server-side rendering</a>.</p>\n',headers:[{text:"Code Splitting and Server-Side Rendering",slug:"code-splitting-and-server-side-rendering"}],title:{text:"Code Splitting",slug:"code-splitting"}}},654:function(n,a){n.exports={markup:'<h1 id="scroll-restoration"><a href="/web/guides/scroll-restoration" class="internal-link">Scroll Restoration</a></h1>\n<p>In earlier versions of React Router we provided out-of-the-box support for scroll restoration and people have been asking for it ever since. Hopefully this document helps you get what you need out of the scroll bar and routing!</p>\n<p>Browsers are starting to handle scroll restoration with <code>history.pushState</code> on their own in the same manner they handle it with normal browser navigation. It already works in chrome and it&#x2019;s really great. <a href="https://majido.github.io/scroll-restoration-proposal/history-based-api.html#web-idl">Here&#x2019;s the Scroll Restoration Spec</a>.</p>\n<p>Because browsers are starting to handle the &#x201C;default case&#x201D; and apps have varying scrolling needs (like this website!), we don&#x2019;t ship with default scroll management. This guide should help you implement whatever scrolling needs you have.</p>\n<h2 id="scroll-restoration-scroll-to-top"><a href="/web/guides/scroll-restoration/scroll-to-top" class="internal-link">Scroll to top</a></h2>\n<p>Most of the time all you need is to &#x201C;scroll to the top&#x201D; because you have a long content page, that when navigated to, stays scrolled down. This is straightforward to handle with a <code>&lt;ScrollToTop&gt;</code> component that will scroll the window up on every navigation, make sure to wrap it in <code>withRouter</code> to give it access to the router&#x2019;s props:</p>\n<pre><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ScrollToTop</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>ScrollToTop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Then render it at the top of your app, but below Router</p>\n<pre><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollToTop</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollToTop</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// or just render it bare anywhere you want, but just one :)</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollToTop</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<p>If you have a tab interface connected to the router, then you probably don&#x2019;t want to be scrolling to the top when they switch tabs. Instead, how about a <code>&lt;ScrollToTopOnMount&gt;</code> in the specific places you need it?</p>\n<pre><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ScrollToTopOnMount</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">LongContent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollToTopOnMount</span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here is my long content page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// somewhere else</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/long-content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>LongContent<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="scroll-restoration-generic-solution"><a href="/web/guides/scroll-restoration/generic-solution" class="internal-link">Generic Solution</a></h2>\n<p>For a generic solution (and what browsers are starting to implement natively) we&#x2019;re talking about two things:</p>\n<ol>\n<li>Scrolling up on navigation so you don&#x2019;t start a new screen scrolled to the bottom</li>\n<li>Restoring scroll positions of the window and overflow elements on &#x201C;back&#x201D; and &#x201C;forward&#x201D; clicks (but not Link clicks!)</li>\n</ol>\n<p>At one point we were wanting to ship a generic API. Here&#x2019;s what we were headed toward:</p>\n<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollRestoration</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RestoredScroll</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>bunny<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token string">&quot;200px&quot;</span><span class="token punctuation">,</span> overflow<span class="token punctuation">:</span> <span class="token string">&quot;auto&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token constant">I</span> will overflow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RestoredScroll</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollRestoration</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>First, <code>ScrollRestoration</code> would scroll the window up on navigation. Second, it would use <code>location.key</code> to save the window scroll position <em>and</em> the scroll positions of <code>RestoredScroll</code> components to <code>sessionStorage</code>. Then, when <code>ScrollRestoration</code> or <code>RestoredScroll</code> components mount, they could look up their position from <code>sessionsStorage</code>.</p>\n<p>What got tricky for me was defining an &#x201C;opt-out&#x201D; API for when I didn&#x2019;t want the window scroll to be managed. For example, if you have some tab navigation floating inside the content of your page you probably <em>don&#x2019;t</em> want to scroll to the top (the tabs might be scrolled out of view!).</p>\n<p>When I learned that chrome manages scroll position for us now, and realized that different apps are going to have different scrolling needs, I kind of lost the belief that we needed to provide something&#x2013;especially when people just want to scroll to the top (which you saw is straight-forward to add to your app on your own).</p>\n<p>Based on this, we no longer feel strongly enough to do the work ourselves (like you we have limited time!). But, we&#x2019;d love to help anybody who feels inclined to implement a generic solution. A solid solution could even live in the project. Hit us up if you get started on it :)</p>\n',headers:[{text:"Scroll to top",slug:"scroll-to-top"},{text:"Generic Solution",slug:"generic-solution"}],title:{text:"Scroll Restoration",slug:"scroll-restoration"}}},655:function(n,a){n.exports={markup:'<h1 id="testing"><a href="/web/guides/testing" class="internal-link">Testing</a></h1>\n<p>React Router relies on React context to work. This affects how you can\ntest your components that use our components.</p>\n<h2 id="testing-context"><a href="/web/guides/testing/context" class="internal-link">Context</a></h2>\n<p>If you try to unit test one of your components that renders a <code>&lt;Link&gt;</code> or a <code>&lt;Route&gt;</code>, etc. you&#x2019;ll get some errors and warnings about context. While you may be tempted to stub out the router context yourself, we recommend you wrap your unit test in a <code>&lt;StaticRouter&gt;</code> or a <code>&lt;MemoryRouter&gt;</code>. Check it out:</p>\n<pre><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Sidebar</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleExpand<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>expand<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>\n          <span class="token punctuation">{</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>path<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// broken</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;it expands when the button is clicked&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sidebar</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">click</span><span class="token punctuation">(</span>theButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>theThingToBeOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// fixed!</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;it expands when the button is clicked&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sidebar</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">click</span><span class="token punctuation">(</span>theButton<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>theThingToBeOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>That&#x2019;s all there is to it.</p>\n<h2 id="testing-starting-at-specific-routes"><a href="/web/guides/testing/starting-at-specific-routes" class="internal-link">Starting at specific routes</a></h2>\n<p><code>&lt;MemoryRouter&gt;</code> supports the <code>initialEntries</code> and <code>initialIndex</code> props,\nso you can boot up an app (or any smaller part of an app) at a specific\nlocation.</p>\n<pre><code class="language-jsx"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;current user is active in sidebar&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MemoryRouter</span> <span class="token attr-name">initialEntries</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;/users/2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sidebar</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expectUserToBeActive</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="testing-navigating"><a href="/web/guides/testing/navigating" class="internal-link">Navigating</a></h2>\n<p>We have a lot of tests that the routes work when the location changes, so you probably don&#x2019;t need to test this stuff. But if you must, since everything happens in render, we do something a little clever like this:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> unmountComponentAtNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> MemoryRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Simulate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-addons-test-utils&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// a way to render any part of your app inside a MemoryRouter</span>\n<span class="token comment">// you pass it a list of steps to execute when the location</span>\n<span class="token comment">// changes, it will call back to you with stuff like</span>\n<span class="token comment">// `match` and `location`, and `history` so you can control</span>\n<span class="token comment">// the flow and make assertions.</span>\n<span class="token keyword">const</span> <span class="token function-variable function">renderTestSequence</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialEntries<span class="token punctuation">,</span>\n  initialIndex<span class="token punctuation">,</span>\n  subject<span class="token punctuation">:</span> Subject<span class="token punctuation">,</span>\n  steps\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">class</span> <span class="token class-name">Assert</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> nextStep <span class="token operator">=</span> steps<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextStep<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">nextStep</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> div <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MemoryRouter</span>\n          <span class="token attr-name">initialIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>initialIndex<span class="token punctuation">}</span></span>\n          <span class="token attr-name">initialEntries</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>initialEntries<span class="token punctuation">}</span></span>\n        <span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n            <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Assert</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Subject</span> <span class="token punctuation">/&gt;</span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Assert</span><span class="token punctuation">&gt;</span></span>\n            <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MemoryRouter</span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Test</span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// our Subject, the App, but you can test any sub</span>\n<span class="token comment">// section of your app too</span>\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n      <span class="token attr-name">exact</span>\n      <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>\n      <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/dashboard<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>click-me<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            Home\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// the actual test!</span>\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;navigates around&quot;</span><span class="token punctuation">,</span> done <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">renderTestSequence</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// tell it the subject you&apos;re testing</span>\n    subject<span class="token punctuation">:</span> App<span class="token punctuation">,</span>\n\n    <span class="token comment">// and the steps to execute each time the location changes</span>\n    steps<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// initial render</span>\n      <span class="token punctuation">(</span><span class="token punctuation">{</span> history<span class="token punctuation">,</span> div <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// assert the screen says what we think it should</span>\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/Welcome/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// now we can imperatively navigate as the test</span>\n        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/dashboard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// second render from new location</span>\n      <span class="token punctuation">(</span><span class="token punctuation">{</span> div <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/Dashboard/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// or we can simulate clicks on Links instead of</span>\n        <span class="token comment">// using history.push</span>\n        Simulate<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#click-me&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          button<span class="token punctuation">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// final render</span>\n      <span class="token punctuation">(</span><span class="token punctuation">{</span> location <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// you&apos;ll want something like `done()` so your test</span>\n        <span class="token comment">// fails if you never make it here.</span>\n        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n',headers:[{text:"Context",slug:"context"},{text:"Starting at specific routes",slug:"starting-at-specific-routes"},{text:"Navigating",slug:"navigating"}],title:{text:"Testing",slug:"testing"}}},656:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\nfunction BasicExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to="/">Home</Link>\n          </li>\n          <li>\n            <Link to="/about">About</Link>\n          </li>\n          <li>\n            <Link to="/topics">Topics</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Route exact path="/" component={Home} />\n        <Route path="/about" component={About} />\n        <Route path="/topics" component={Topics} />\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:topicId`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Topic({ match }) {\n  return (\n    <div>\n      <h3>{match.params.topicId}</h3>\n    </div>\n  );\n}\n\nexport default BasicExample;\n'},657:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\nfunction ParamsExample() {\n  return (\n    <Router>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to="/netflix">Netflix</Link>\n          </li>\n          <li>\n            <Link to="/zillow-group">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to="/yahoo">Yahoo</Link>\n          </li>\n          <li>\n            <Link to="/modus-create">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Route path="/:id" component={Child} />\n\n        {/*\n           It\'s possible to use regular expressions to control what param values should be matched.\n              * "/order/asc"  - matched\n              * "/order/desc" - matched\n              * "/order/foo"  - not matched\n        */}\n        <Route\n          path="/order/:direction(asc|desc)"\n          component={ComponentWithRegex}\n        />\n      </div>\n    </Router>\n  );\n}\n\nfunction Child({ match }) {\n  return (\n    <div>\n      <h3>ID: {match.params.id}</h3>\n    </div>\n  );\n}\n\nfunction ComponentWithRegex({ match }) {\n  return (\n    <div>\n      <h3>Only asc/desc are allowed: {match.params.direction}</h3>\n    </div>\n  );\n}\n\nexport default ParamsExample;\n'},658:function(n,a){n.exports='import React, { Component } from "react";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from "react-router-dom";\n\n////////////////////////////////////////////////////////////\n// 1. Click the public page\n// 2. Click the protected page\n// 3. Log in\n// 4. Click the back button, note the URL each time\n\nfunction AuthExample() {\n  return (\n    <Router>\n      <div>\n        <AuthButton />\n        <ul>\n          <li>\n            <Link to="/public">Public Page</Link>\n          </li>\n          <li>\n            <Link to="/protected">Protected Page</Link>\n          </li>\n        </ul>\n        <Route path="/public" component={Public} />\n        <Route path="/login" component={Login} />\n        <PrivateRoute path="/protected" component={Protected} />\n      </div>\n    </Router>\n  );\n}\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    this.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout(cb) {\n    this.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n};\n\nconst AuthButton = withRouter(\n  ({ history }) =>\n    fakeAuth.isAuthenticated ? (\n      <p>\n        Welcome!{" "}\n        <button\n          onClick={() => {\n            fakeAuth.signout(() => history.push("/"));\n          }}\n        >\n          Sign out\n        </button>\n      </p>\n    ) : (\n      <p>You are not logged in.</p>\n    )\n);\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        fakeAuth.isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: "/login",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction Public() {\n  return <h3>Public</h3>;\n}\n\nfunction Protected() {\n  return <h3>Protected</h3>;\n}\n\nclass Login extends Component {\n  state = { redirectToReferrer: false };\n\n  login = () => {\n    fakeAuth.authenticate(() => {\n      this.setState({ redirectToReferrer: true });\n    });\n  };\n\n  render() {\n    let { from } = this.props.location.state || { from: { pathname: "/" } };\n    let { redirectToReferrer } = this.state;\n\n    if (redirectToReferrer) return <Redirect to={from} />;\n\n    return (\n      <div>\n        <p>You must log in to view the page at {from.pathname}</p>\n        <button onClick={this.login}>Log in</button>\n      </div>\n    );\n  }\n}\n\nexport default AuthExample;\n'},659:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\nfunction CustomLinkExample() {\n  return (\n    <Router>\n      <div>\n        <OldSchoolMenuLink activeOnlyWhenExact={true} to="/" label="Home" />\n        <OldSchoolMenuLink to="/about" label="About" />\n        <hr />\n        <Route exact path="/" component={Home} />\n        <Route path="/about" component={About} />\n      </div>\n    </Router>\n  );\n}\n\nfunction OldSchoolMenuLink({ label, to, activeOnlyWhenExact }) {\n  return (\n    <Route\n      path={to}\n      exact={activeOnlyWhenExact}\n      children={({ match }) => (\n        <div className={match ? "active" : ""}>\n          {match ? "> " : ""}\n          <Link to={to}>{label}</Link>\n        </div>\n      )}\n    />\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nexport default CustomLinkExample;\n'},660:function(n,a){n.exports='import React, { Component } from "react";\nimport { BrowserRouter as Router, Route, Link, Prompt } from "react-router-dom";\n\nfunction PreventingTransitionsExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to="/">Form</Link>\n          </li>\n          <li>\n            <Link to="/one">One</Link>\n          </li>\n          <li>\n            <Link to="/two">Two</Link>\n          </li>\n        </ul>\n        <Route path="/" exact component={Form} />\n        <Route path="/one" render={() => <h3>One</h3>} />\n        <Route path="/two" render={() => <h3>Two</h3>} />\n      </div>\n    </Router>\n  );\n}\n\nclass Form extends Component {\n  state = { isBlocking: false };\n\n  render() {\n    let { isBlocking } = this.state;\n\n    return (\n      <form\n        onSubmit={event => {\n          event.preventDefault();\n          event.target.reset();\n          this.setState({\n            isBlocking: false\n          });\n        }}\n      >\n        <Prompt\n          when={isBlocking}\n          message={location =>\n            `Are you sure you want to go to ${location.pathname}`\n          }\n        />\n\n        <p>\n          Blocking?{" "}\n          {isBlocking ? "Yes, click a link or the back button" : "Nope"}\n        </p>\n\n        <p>\n          <input\n            size="50"\n            placeholder="type something to block transitions"\n            onChange={event => {\n              this.setState({\n                isBlocking: event.target.value.length > 0\n              });\n            }}\n          />\n        </p>\n\n        <p>\n          <button>Submit to stop blocking</button>\n        </p>\n      </form>\n    );\n  }\n}\n\nexport default PreventingTransitionsExample;\n'},661:function(n,a){n.exports='import React from "react";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from "react-router-dom";\n\nfunction NoMatchExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to="/">Home</Link>\n          </li>\n          <li>\n            <Link to="/old-match">Old Match, to be redirected</Link>\n          </li>\n          <li>\n            <Link to="/will-match">Will Match</Link>\n          </li>\n          <li>\n            <Link to="/will-not-match">Will Not Match</Link>\n          </li>\n          <li>\n            <Link to="/also/will/not/match">Also Will Not Match</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route path="/" exact component={Home} />\n          <Redirect from="/old-match" to="/will-match" />\n          <Route path="/will-match" component={WillMatch} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <p>\n      A <code>&lt;Switch></code> renders the first child <code>&lt;Route></code>{" "}\n      that matches. A <code>&lt;Route></code> with no <code>path</code> always\n      matches.\n    </p>\n  );\n}\n\nfunction WillMatch() {\n  return <h3>Matched!</h3>;\n}\n\nfunction NoMatch({ location }) {\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n}\n\nexport default NoMatchExample;\n'},662:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\nconst PEEPS = [\n  { id: 0, name: "Michelle", friends: [1, 2, 3] },\n  { id: 1, name: "Sean", friends: [0, 3] },\n  { id: 2, name: "Kim", friends: [0, 1, 3] },\n  { id: 3, name: "David", friends: [1, 2] }\n];\n\nfunction find(id) {\n  return PEEPS.find(p => p.id == id);\n}\n\nfunction RecursiveExample() {\n  return (\n    <Router>\n      <Person match={{ params: { id: 0 }, url: "" }} />\n    </Router>\n  );\n}\n\nfunction Person({ match }) {\n  let person = find(match.params.id);\n\n  return (\n    <div>\n      <h3>\n        {person.name}\n        ’s Friends\n      </h3>\n      <ul>\n        {person.friends.map(id => (\n          <li key={id}>\n            <Link to={`${match.url}/${id}`}>{find(id).name}</Link>\n          </li>\n        ))}\n      </ul>\n      <Route path={`${match.url}/:id`} component={Person} />\n    </div>\n  );\n}\n\nexport default RecursiveExample;\n'},663:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\n// Each logical "route" has two components, one for\n// the sidebar and one for the main area. We want to\n// render both of them in different places when the\n// path matches the current URL.\nconst routes = [\n  {\n    path: "/",\n    exact: true,\n    sidebar: () => <div>home!</div>,\n    main: () => <h2>Home</h2>\n  },\n  {\n    path: "/bubblegum",\n    sidebar: () => <div>bubblegum!</div>,\n    main: () => <h2>Bubblegum</h2>\n  },\n  {\n    path: "/shoelaces",\n    sidebar: () => <div>shoelaces!</div>,\n    main: () => <h2>Shoelaces</h2>\n  }\n];\n\nfunction SidebarExample() {\n  return (\n    <Router>\n      <div style={{ display: "flex" }}>\n        <div\n          style={{\n            padding: "10px",\n            width: "40%",\n            background: "#f0f0f0"\n          }}\n        >\n          <ul style={{ listStyleType: "none", padding: 0 }}>\n            <li>\n              <Link to="/">Home</Link>\n            </li>\n            <li>\n              <Link to="/bubblegum">Bubblegum</Link>\n            </li>\n            <li>\n              <Link to="/shoelaces">Shoelaces</Link>\n            </li>\n          </ul>\n\n          {routes.map((route, index) => (\n            // You can render a <Route> in as many places\n            // as you want in your app. It will render along\n            // with any other <Route>s that also match the URL.\n            // So, a sidebar or breadcrumbs or anything else\n            // that requires you to render multiple things\n            // in multiple places at the same URL is nothing\n            // more than multiple <Route>s.\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.sidebar}\n            />\n          ))}\n        </div>\n\n        <div style={{ flex: 1, padding: "10px" }}>\n          {routes.map((route, index) => (\n            // Render more <Route>s with the same paths as\n            // above, but different components this time.\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              component={route.main}\n            />\n          ))}\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default SidebarExample;\n'},664:function(n,a){n.exports='import React from "react";\nimport { TransitionGroup, CSSTransition } from "react-transition-group";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from "react-router-dom";\n\nimport "./styles.css";\n\nfunction AnimationExample() {\n  return (\n    <Router>\n      <Route\n        render={({ location }) => (\n          <div style={styles.fill}>\n            <Route\n              exact\n              path="/"\n              render={() => <Redirect to="/hsl/10/90/50" />}\n            />\n\n            <ul style={styles.nav}>\n              <NavLink to="/hsl/10/90/50">Red</NavLink>\n              <NavLink to="/hsl/120/100/40">Green</NavLink>\n              <NavLink to="/rgb/33/150/243">Blue</NavLink>\n              <NavLink to="/rgb/240/98/146">Pink</NavLink>\n            </ul>\n\n            <div style={styles.content}>\n              <TransitionGroup>\n                {/* no different than other usage of\n                CSSTransition, just make sure to pass\n                `location` to `Switch` so it can match\n                the old location as it animates out\n            */}\n                <CSSTransition\n                  key={location.key}\n                  classNames="fade"\n                  timeout={300}\n                >\n                  <Switch location={location}>\n                    <Route exact path="/hsl/:h/:s/:l" component={HSL} />\n                    <Route exact path="/rgb/:r/:g/:b" component={RGB} />\n                    {/* Without this `Route`, we would get errors during\n                    the initial transition from `/` to `/hsl/10/90/50`\n                */}\n                    <Route render={() => <div>Not Found</div>} />\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            </div>\n          </div>\n        )}\n      />\n    </Router>\n  );\n}\n\nfunction NavLink(props) {\n  return (\n    <li style={styles.navItem}>\n      <Link {...props} style={{ color: "inherit" }} />\n    </li>\n  );\n}\n\nfunction HSL({ match: { params } }) {\n  return (\n    <div\n      style={{\n        ...styles.fill,\n        ...styles.hsl,\n        background: `hsl(${params.h}, ${params.s}%, ${params.l}%)`\n      }}\n    >\n      hsl(\n      {params.h}, {params.s}\n      %, {params.l}\n      %)\n    </div>\n  );\n}\n\nfunction RGB({ match: { params } }) {\n  return (\n    <div\n      style={{\n        ...styles.fill,\n        ...styles.rgb,\n        background: `rgb(${params.r}, ${params.g}, ${params.b})`\n      }}\n    >\n      rgb(\n      {params.r}, {params.g}, {params.b})\n    </div>\n  );\n}\n\nconst styles = {};\n\nstyles.fill = {\n  position: "absolute",\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0\n};\n\nstyles.content = {\n  ...styles.fill,\n  top: "40px",\n  textAlign: "center"\n};\n\nstyles.nav = {\n  padding: 0,\n  margin: 0,\n  position: "absolute",\n  top: 0,\n  height: "40px",\n  width: "100%",\n  display: "flex"\n};\n\nstyles.navItem = {\n  textAlign: "center",\n  flex: 1,\n  listStyleType: "none",\n  padding: "10px"\n};\n\nstyles.hsl = {\n  ...styles.fill,\n  color: "white",\n  paddingTop: "20px",\n  fontSize: "30px"\n};\n\nstyles.rgb = {\n  ...styles.fill,\n  color: "white",\n  paddingTop: "20px",\n  fontSize: "30px"\n};\n\nexport default AnimationExample;\n'},665:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link, Switch } from "react-router-dom";\n\nfunction AmbiguousExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to="/about">About Us (static)</Link>\n          </li>\n          <li>\n            <Link to="/company">Company (static)</Link>\n          </li>\n          <li>\n            <Link to="/kim">Kim (dynamic)</Link>\n          </li>\n          <li>\n            <Link to="/chris">Chris (dynamic)</Link>\n          </li>\n        </ul>\n\n        {/*\n          Sometimes you want to have a whitelist of static paths\n          like "/about" and "/company" but also allow for dynamic\n          patterns like "/:user". The problem is that "/about"\n          is ambiguous and will match both "/about" and "/:user".\n          Most routers have an algorithm to decide for you what\n          it will match since they only allow you to match one\n          "route". React Router lets you match in multiple places\n          on purpose (sidebars, breadcrumbs, etc). So, when you\n          want to clear up any ambiguous matching, and not match\n          "/about" to "/:user", just wrap your <Route>s in a\n          <Switch>. It will render the first one that matches.\n      */}\n        <Switch>\n          <Route path="/about" component={About} />\n          <Route path="/company" component={Company} />\n          <Route path="/:user" component={User} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Company() {\n  return <h2>Company</h2>;\n}\n\nfunction User({ match }) {\n  return (\n    <div>\n      <h2>User: {match.params.user}</h2>\n    </div>\n  );\n}\n\nexport default AmbiguousExample;\n'},666:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\n// Some folks find value in a centralized route config.\n// A route config is just data. React is great at mapping\n// data into components, and <Route> is a component.\n\n////////////////////////////////////////////////////////////\n// first our route components\nfunction Sandwiches() {\n  return <h2>Sandwiches</h2>;\n}\n\nfunction Tacos({ routes }) {\n  return (\n    <div>\n      <h2>Tacos</h2>\n      <ul>\n        <li>\n          <Link to="/tacos/bus">Bus</Link>\n        </li>\n        <li>\n          <Link to="/tacos/cart">Cart</Link>\n        </li>\n      </ul>\n\n      {routes.map((route, i) => (\n        <RouteWithSubRoutes key={i} {...route} />\n      ))}\n    </div>\n  );\n}\n\nfunction Bus() {\n  return <h3>Bus</h3>;\n}\n\nfunction Cart() {\n  return <h3>Cart</h3>;\n}\n\n////////////////////////////////////////////////////////////\n// then our route config\nconst routes = [\n  {\n    path: "/sandwiches",\n    component: Sandwiches\n  },\n  {\n    path: "/tacos",\n    component: Tacos,\n    routes: [\n      {\n        path: "/tacos/bus",\n        component: Bus\n      },\n      {\n        path: "/tacos/cart",\n        component: Cart\n      }\n    ]\n  }\n];\n\n// wrap <Route> and use this everywhere instead, then when\n// sub routes are added to any route it\'ll work\nfunction RouteWithSubRoutes(route) {\n  return (\n    <Route\n      path={route.path}\n      render={props => (\n        // pass the sub-routes down to keep nesting\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n\nfunction RouteConfigExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to="/tacos">Tacos</Link>\n          </li>\n          <li>\n            <Link to="/sandwiches">Sandwiches</Link>\n          </li>\n        </ul>\n\n        {routes.map((route, i) => (\n          <RouteWithSubRoutes key={i} {...route} />\n        ))}\n      </div>\n    </Router>\n  );\n}\n\nexport default RouteConfigExample;\n'},667:function(n,a){n.exports='import React, { Component } from "react";\nimport { BrowserRouter as Router, Switch, Route, Link } from "react-router-dom";\n\n// This example shows how to render two different screens\n// (or the same screen in a different context) at the same url,\n// depending on how you got there.\n//\n// Click the colors and see them full screen, then "visit the\n// gallery" and click on the colors. Note the URL and the component\n// are the same as before but now we see them inside a modal\n// on top of the old screen.\n\nclass ModalSwitch extends Component {\n  // We can pass a location to <Switch/> that will tell it to\n  // ignore the router\'s current location and use the location\n  // prop instead.\n  //\n  // We can also use "location state" to tell the app the user\n  // wants to go to `/img/2` in a modal, rather than as the\n  // main page, keeping the gallery visible behind it.\n  //\n  // Normally, `/img/2` wouldn\'t match the gallery at `/`.\n  // So, to get both screens to render, we can save the old\n  // location and pass it to Switch, so it will think the location\n  // is still `/` even though its `/img/2`.\n  previousLocation = this.props.location;\n\n  componentWillUpdate(nextProps) {\n    let { location } = this.props;\n\n    // set previousLocation if props.location is not modal\n    if (\n      nextProps.history.action !== "POP" &&\n      (!location.state || !location.state.modal)\n    ) {\n      this.previousLocation = this.props.location;\n    }\n  }\n\n  render() {\n    let { location } = this.props;\n\n    let isModal = !!(\n      location.state &&\n      location.state.modal &&\n      this.previousLocation !== location\n    ); // not initial render\n\n    return (\n      <div>\n        <Switch location={isModal ? this.previousLocation : location}>\n          <Route exact path="/" component={Home} />\n          <Route path="/gallery" component={Gallery} />\n          <Route path="/img/:id" component={ImageView} />\n        </Switch>\n        {isModal ? <Route path="/img/:id" component={Modal} /> : null}\n      </div>\n    );\n  }\n}\n\nconst IMAGES = [\n  { id: 0, title: "Dark Orchid", color: "DarkOrchid" },\n  { id: 1, title: "Lime Green", color: "LimeGreen" },\n  { id: 2, title: "Tomato", color: "Tomato" },\n  { id: 3, title: "Seven Ate Nine", color: "#789" },\n  { id: 4, title: "Crimson", color: "Crimson" }\n];\n\nfunction Thumbnail({ color }) {\n  return (\n    <div\n      style={{\n        width: 50,\n        height: 50,\n        background: color\n      }}\n    />\n  );\n}\n\nfunction Image({ color }) {\n  return (\n    <div\n      style={{\n        width: "100%",\n        height: 400,\n        background: color\n      }}\n    />\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <Link to="/gallery">Visit the Gallery</Link>\n      <h2>Featured Images</h2>\n      <ul>\n        <li>\n          <Link to="/img/2">Tomato</Link>\n        </li>\n        <li>\n          <Link to="/img/4">Crimson</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction Gallery() {\n  return (\n    <div>\n      {IMAGES.map(i => (\n        <Link\n          key={i.id}\n          to={{\n            pathname: `/img/${i.id}`,\n            // this is the trick!\n            state: { modal: true }\n          }}\n        >\n          <Thumbnail color={i.color} />\n          <p>{i.title}</p>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nfunction ImageView({ match }) {\n  let image = IMAGES[parseInt(match.params.id, 10)];\n\n  if (!image) return <div>Image not found</div>;\n\n  return (\n    <div>\n      <h1>{image.title}</h1>\n      <Image color={image.color} />\n    </div>\n  );\n}\n\nfunction Modal({ match, history }) {\n  let image = IMAGES[parseInt(match.params.id, 10)];\n\n  if (!image) return null;\n\n  let back = e => {\n    e.stopPropagation();\n    history.goBack();\n  };\n\n  return (\n    <div\n      onClick={back}\n      style={{\n        position: "absolute",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        background: "rgba(0, 0, 0, 0.15)"\n      }}\n    >\n      <div\n        className="modal"\n        style={{\n          position: "absolute",\n          background: "#fff",\n          top: 25,\n          left: "10%",\n          right: "10%",\n          padding: 15,\n          border: "2px solid #444"\n        }}\n      >\n        <h1>{image.title}</h1>\n        <Image color={image.color} />\n        <button type="button" onClick={back}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction ModalGallery() {\n  return (\n    <Router>\n      <Route component={ModalSwitch} />\n    </Router>\n  );\n}\n\nexport default ModalGallery;\n'},668:function(n,a){n.exports='import React, { Component } from "react";\nimport { StaticRouter, Route } from "react-router-dom";\n\n// This example renders a route within a StaticRouter and populates its\n// staticContext, which it then prints out. In the real world you would\n// use the StaticRouter for server-side rendering:\n//\n// import express from "express";\n// import ReactDOMServer from "react-dom/server";\n//\n// const app = express()\n//\n// app.get(\'*\', (req, res) => {\n//   let staticContext = {}\n//\n//   let html = ReactDOMServer.renderToString(\n//     <StaticRouter location={req.url} context={staticContext}>\n//       <App /> (includes the RouteStatus component below e.g. for 404 errors)\n//     </StaticRouter>\n//   );\n//\n//   res.status(staticContext.statusCode || 200).send(html);\n// });\n//\n// app.listen(process.env.PORT || 3000);\n\nfunction RouteStatus(props) {\n  return (\n    <Route\n      render={({ staticContext }) => {\n        // we have to check if staticContext exists\n        // because it will be undefined if rendered through a BrowserRouter\n        if (staticContext) {\n          staticContext.statusCode = props.statusCode;\n        }\n\n        return <div>{props.children}</div>;\n      }}\n    />\n  );\n}\n\nfunction PrintContext(props) {\n  return <p>Static context: {JSON.stringify(props.staticContext)}</p>;\n}\n\nclass StaticRouterExample extends Component {\n  // This is the context object that we pass to the StaticRouter.\n  // It can be modified by routes to provide additional information\n  // for the server-side render\n  staticContext = {};\n\n  render() {\n    return (\n      <StaticRouter location="/foo" context={this.staticContext}>\n        <div>\n          <RouteStatus statusCode={404}>\n            <p>Route with statusCode 404</p>\n            <PrintContext staticContext={this.staticContext} />\n          </RouteStatus>\n        </div>\n      </StaticRouter>\n    );\n  }\n}\n\nexport default StaticRouterExample;\n'},669:function(n,a){n.exports='import React from "react";\nimport { BrowserRouter as Router, Route, Link } from "react-router-dom";\n\nfunction ParamsDemo({ location }) {\n  let params = new URLSearchParams(location.search);\n\n  return (\n    <div>\n      <p>\n        React Router does not have any opinions about how your parse URL query\n        strings. Some applications use simple key=value query strings, but\n        others embed arrays and objects in the query string. So it\'s up to you\n        to parse the search string yourself.\n      </p>\n      <p>\n        In modern browsers that support{" "}\n        <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL">\n          the URL API\n        </a>\n        , you can instantiate a <code>URLSearchParams</code> object from{" "}\n        <code>location.search</code> and use that.\n      </p>\n      <p>\n        In{" "}\n        <a href="https://caniuse.com/#feat=url">\n          browsers that do not support the URL API (read: IE)\n        </a>{" "}\n        you can use a 3rd party library such as{" "}\n        <a href="https://github.com/sindresorhus/query-string">query-string</a>.\n      </p>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to={{ pathname: "/account", search: "?name=netflix" }}>\n              Netflix\n            </Link>\n          </li>\n          <li>\n            <Link to={{ pathname: "/account", search: "?name=zillow-group" }}>\n              Zillow Group\n            </Link>\n          </li>\n          <li>\n            <Link to={{ pathname: "/account", search: "?name=yahoo" }}>\n              Yahoo\n            </Link>\n          </li>\n          <li>\n            <Link to={{ pathname: "/account", search: "?name=modus-create" }}>\n              Modus Create\n            </Link>\n          </li>\n        </ul>\n\n        <Child name={params.get("name")} />\n      </div>\n    </div>\n  );\n}\n\nfunction Child({ name }) {\n  return (\n    <div>\n      {name ? (\n        <h3>\n          The <code>name</code> in the query string is "{name}"\n        </h3>\n      ) : (\n        <h3>There is no name in the query string</h3>\n      )}\n    </div>\n  );\n}\n\nfunction ParamsExample() {\n  return (\n    <Router>\n      <Route component={ParamsDemo} />\n    </Router>\n  );\n}\n\nexport default ParamsExample;\n'}}]);
//# sourceMappingURL=2-fea43acd78d285bf5f89.js.map