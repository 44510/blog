


// 工厂模式是为了解决多个类似对象声明的问题;也就是为了解决实列化对象产生重复的问题。

function CreatePerson(name, age, sex) {
    var obj = new Object();
    obj.name = name;
    obj.age = age;
    obj.sex = sex;
    obj.sayName = function () {
        return this.name;
    }
    return obj;
}
var p1 = new CreatePerson("longen", '28', '男');
var p2 = new CreatePerson("tugenhua", '27', '女');

// 特点：
// 优点：
// 工厂模式的好处就是为系统结构提供灵活的动态扩展机制.减速少工作量,方便维护.
// 工厂类一个用处就是尽量解耦合

// 1 工厂方法封装了对象创建的细节,将对象创建代码和其他部分脱离,减少相干性.
// 2 有利于同类对象创建的统一管理和控制
// 3 你所关心的仅仅是工厂方法返回的接口方法,不必关心实现细节

// 面向对象的封装(Encapsulation)和分派(Delegation)告诉我们，尽量将长的代码分派“切割”成每段，将每段再“封装 ”起来(减少段和段之间偶合联系性)，这样，就会将风险分散，以后如果需要修改，只要更改每段，不会再发生牵一动百的事情。


// 1、抽象工厂模式隔离了具体类的生产，使得客户并不需要知道什么被创建。
// 2、当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。
// 3、增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。
 
// 缺点：
// 增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。